(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type short_short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_short_integer__content "model_trace:" : short_short_integer }
 
 function short_short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_integer__content "model_trace:" : short_integer }
 
 function short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer__ref #"system.ads" 1 0 0# =
  { mutable integer__content "model_trace:" : integer }
 
 function integer__ref___projection #"system.ads" 1 0 0# 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc #"system.ads" 1 0 0# 
   (x : integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_integer__content "model_trace:" : long_integer }
 
 function long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type long_long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_long_integer__content "model_trace:" : long_long_integer }
 
 function long_long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type natural__ref #"system.ads" 1 0 0# =
  { mutable natural__content "model_trace:" : natural }
 
 function natural__ref___projection #"system.ads" 1 0 0# 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc #"system.ads" 1 0 0# 
   (x : natural__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type positive__ref #"system.ads" 1 0 0# =
  { mutable positive__content "model_trace:" : positive }
 
 function positive__ref___projection #"system.ads" 1 0 0# 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc #"system.ads" 1 0 0# 
   (x : positive__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type short_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = short_float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type short_float__ref #"system.ads" 1 0 0# =
  { mutable short_float__content "model_trace:" : short_float }
 
 function short_float__ref___projection #"system.ads" 1 0 0# 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc #"system.ads" 1 0 0# 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type float__ref #"system.ads" 1 0 0# =
  { mutable float__content "model_trace:" : float }
 
 function float__ref___projection #"system.ads" 1 0 0# 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc #"system.ads" 1 0 0# 
   (x : float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type long_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_float, 
 function round_real_tmp = Floating.round_double, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type long_float__ref #"system.ads" 1 0 0# =
  { mutable long_float__content "model_trace:" : long_float }
 
 function long_float__ref___projection #"system.ads" 1 0 0# 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc #"system.ads" 1 0 0# 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type long_long_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type long_long_float__ref #"system.ads" 1 0 0# =
  { mutable long_long_float__content "model_trace:" : long_long_float }
 
 function long_long_float__ref___projection #"system.ads" 1 0 0# 
   (a : long_long_float__ref) : long_long_float =
  a.long_long_float__content
 
 meta "model_projection" function long_long_float__ref___projection
 
 meta "inline : no" function long_long_float__ref___projection
 
 val long_long_float__havoc #"system.ads" 1 0 0# 
   (x : long_long_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  255
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type character__ref #"system.ads" 1 0 0# =
  { mutable character__content "model_trace:" : character }
 
 function character__ref___projection #"system.ads" 1 0 0# 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc #"system.ads" 1 0 0# 
   (x : character__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  65535
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_character__content "model_trace:" : wide_character }
 
 function wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type wide_wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_character__content "model_trace:" : wide_wide_character }
 
 function wide_wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__character.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string #"system.ads" 1 0 0# 
   (x : Main.__image) : string
 
 function from_string #"system.ads" 1 0 0# 
   (x : string) : Main.__image
 
 type string__ref #"system.ads" 1 0 0# =
  { mutable string__content "model_trace:" : string }
 
 function string__ref___projection #"system.ads" 1 0 0# 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc #"system.ads" 1 0 0# 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_character.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Array__Int__Standard__wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_string__content "model_trace:" : wide_string }
 
 function wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_wide_character.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Array__Int__Standard__wide_wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_string__content "model_trace:" : wide_wide_string }
 
 function wide_wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration #"system.ads" 1 0 0# 
 
 function inv_small #"system.ads" 1 0 0# 
   : Main.__fixed =
  1000000000
 
 function first #"system.ads" 1 0 0# 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small
 
 type duration__ref #"system.ads" 1 0 0# =
  { mutable duration__content "model_trace:" : duration }
 
 function duration__ref___projection #"system.ads" 1 0 0# 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc #"system.ads" 1 0 0# 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_8__ref #"system.ads" 1 0 0# =
  { mutable integer_8__content "model_trace:" : integer_8 }
 
 function integer_8__ref___projection #"system.ads" 1 0 0# 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc #"system.ads" 1 0 0# 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_16__ref #"system.ads" 1 0 0# =
  { mutable integer_16__content "model_trace:" : integer_16 }
 
 function integer_16__ref___projection #"system.ads" 1 0 0# 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc #"system.ads" 1 0 0# 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_32__ref #"system.ads" 1 0 0# =
  { mutable integer_32__content "model_trace:" : integer_32 }
 
 function integer_32__ref___projection #"system.ads" 1 0 0# 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc #"system.ads" 1 0 0# 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_64__ref #"system.ads" 1 0 0# =
  { mutable integer_64__content "model_trace:" : integer_64 }
 
 function integer_64__ref___projection #"system.ads" 1 0 0# 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc #"system.ads" 1 0 0# 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type universal_integer__ref #"system.ads" 1 0 0# =
  { mutable universal_integer__content "model_trace:" : universal_integer }
 
 function universal_integer__ref___projection #"system.ads" 1 0 0# 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc #"system.ads" 1 0 0# 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "universal_real", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_real
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type universal_real #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = universal_real, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type universal_real__ref #"system.ads" 1 0 0# =
  { mutable universal_real__content "model_trace:" : universal_real }
 
 function universal_real__ref___projection #"system.ads" 1 0 0# 
   (a : universal_real__ref) : universal_real =
  a.universal_real__content
 
 meta "model_projection" function universal_real__ref___projection
 
 meta "inline : no" function universal_real__ref___projection
 
 val universal_real__havoc #"system.ads" 1 0 0# 
   (x : universal_real__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "fuel_type" defined at pump_type.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Pump_type__fuel_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type fuel_type #"pump_type.ads" 4 0 0# 
 
 function first #"pump_type.ads" 4 0 0# 
   : int =
  0
 
 function last #"pump_type.ads" 4 0 0# 
   : int =
  2
 
 predicate in_range #"pump_type.ads" 4 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = fuel_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type fuel_type__ref #"pump_type.ads" 4 0 0# =
  { mutable fuel_type__content "model_trace:" : fuel_type }
 
 function fuel_type__ref___projection #"pump_type.ads" 4 0 0# 
   (a : fuel_type__ref) : fuel_type =
  a.fuel_type__content
 
 meta "model_projection" function fuel_type__ref___projection
 
 meta "inline : no" function fuel_type__ref___projection
 
 val fuel_type__havoc #"pump_type.ads" 4 0 0# 
   (x : fuel_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TpriceB" defined at pump_type.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Pump_type__TpriceB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tpriceB #"pump_type.ads" 5 0 0# 
 
 function first #"pump_type.ads" 5 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"pump_type.ads" 5 0 0# 
   : int =
  2147483647
 
 predicate in_range #"pump_type.ads" 5 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tpriceB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tpriceB__ref #"pump_type.ads" 5 0 0# =
  { mutable tpriceB__content "model_trace:" : tpriceB }
 
 function tpriceB__ref___projection #"pump_type.ads" 5 0 0# 
   (a : tpriceB__ref) : tpriceB =
  a.tpriceB__content
 
 meta "model_projection" function tpriceB__ref___projection
 
 meta "inline : no" function tpriceB__ref___projection
 
 val tpriceB__havoc #"pump_type.ads" 5 0 0# 
   (x : tpriceB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "price" defined at pump_type.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Pump_type__price
 use import "_gnatprove_standard".Main
 use import "int".Int

 type price #"pump_type.ads" 5 0 0# 
 
 function first #"pump_type.ads" 5 0 0# 
   : int =
  0
 
 function last #"pump_type.ads" 5 0 0# 
   : int =
  3000
 
 predicate in_range #"pump_type.ads" 5 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = price, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type price__ref #"pump_type.ads" 5 0 0# =
  { mutable price__content "model_trace:" : price }
 
 function price__ref___projection #"pump_type.ads" 5 0 0# 
   (a : price__ref) : price =
  a.price__content
 
 meta "model_projection" function price__ref___projection
 
 meta "inline : no" function price__ref___projection
 
 val price__havoc #"pump_type.ads" 5 0 0# 
   (x : price__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "state" defined at pump_type.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Pump_type__state
 use import "_gnatprove_standard".Main
 use import "int".Int

 type state #"pump_type.ads" 6 0 0# 
 
 function first #"pump_type.ads" 6 0 0# 
   : int =
  0
 
 function last #"pump_type.ads" 6 0 0# 
   : int =
  3
 
 predicate in_range #"pump_type.ads" 6 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = state, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type state__ref #"pump_type.ads" 6 0 0# =
  { mutable state__content "model_trace:" : state }
 
 function state__ref___projection #"pump_type.ads" 6 0 0# 
   (a : state__ref) : state =
  a.state__content
 
 meta "model_projection" function state__ref___projection
 
 meta "inline : no" function state__ref___projection
 
 val state__havoc #"pump_type.ads" 6 0 0# 
   (x : state__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "nozzle_in_cradleB" defined at pump_type.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pump_type__nozzle_in_cradleB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type nozzle_in_cradleB #"pump_type.ads" 7 0 0# 
 
 function first #"pump_type.ads" 7 0 0# 
   : int =
  0
 
 function last #"pump_type.ads" 7 0 0# 
   : int =
  1
 
 predicate in_range #"pump_type.ads" 7 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = nozzle_in_cradleB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type nozzle_in_cradleB__ref #"pump_type.ads" 7 0 0# =
  { mutable nozzle_in_cradleB__content "model_trace:" : nozzle_in_cradleB }
 
 function nozzle_in_cradleB__ref___projection #"pump_type.ads" 7 0 0# 
   (a : nozzle_in_cradleB__ref) : nozzle_in_cradleB =
  a.nozzle_in_cradleB__content
 
 meta "model_projection" function nozzle_in_cradleB__ref___projection
 
 meta "inline : no" function nozzle_in_cradleB__ref___projection
 
 val nozzle_in_cradleB__havoc #"pump_type.ads" 7 0 0# 
   (x : nozzle_in_cradleB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "nozzle_in_cradle" defined at pump_type.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pump_type__nozzle_in_cradle
 use import "_gnatprove_standard".Main
 use import "int".Int

 type nozzle_in_cradle #"pump_type.ads" 7 0 0# 
 
 function first #"pump_type.ads" 7 0 0# 
   : int =
  0
 
 function last #"pump_type.ads" 7 0 0# 
   : int =
  1
 
 predicate in_range #"pump_type.ads" 7 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = nozzle_in_cradle, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type nozzle_in_cradle__ref #"pump_type.ads" 7 0 0# =
  { mutable nozzle_in_cradle__content "model_trace:" : nozzle_in_cradle }
 
 function nozzle_in_cradle__ref___projection #"pump_type.ads" 7 0 0# 
   (a : nozzle_in_cradle__ref) : nozzle_in_cradle =
  a.nozzle_in_cradle__content
 
 meta "model_projection" function nozzle_in_cradle__ref___projection
 
 meta "inline : no" function nozzle_in_cradle__ref___projection
 
 val nozzle_in_cradle__havoc #"pump_type.ads" 7 0 0# 
   (x : nozzle_in_cradle__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "full_tank_sensorB" defined at pump_type.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Pump_type__full_tank_sensorB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type full_tank_sensorB #"pump_type.ads" 8 0 0# 
 
 function first #"pump_type.ads" 8 0 0# 
   : int =
  0
 
 function last #"pump_type.ads" 8 0 0# 
   : int =
  1
 
 predicate in_range #"pump_type.ads" 8 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = full_tank_sensorB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type full_tank_sensorB__ref #"pump_type.ads" 8 0 0# =
  { mutable full_tank_sensorB__content "model_trace:" : full_tank_sensorB }
 
 function full_tank_sensorB__ref___projection #"pump_type.ads" 8 0 0# 
   (a : full_tank_sensorB__ref) : full_tank_sensorB =
  a.full_tank_sensorB__content
 
 meta "model_projection" function full_tank_sensorB__ref___projection
 
 meta "inline : no" function full_tank_sensorB__ref___projection
 
 val full_tank_sensorB__havoc #"pump_type.ads" 8 0 0# 
   (x : full_tank_sensorB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "full_tank_sensor" defined at pump_type.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Pump_type__full_tank_sensor
 use import "_gnatprove_standard".Main
 use import "int".Int

 type full_tank_sensor #"pump_type.ads" 8 0 0# 
 
 function first #"pump_type.ads" 8 0 0# 
   : int =
  0
 
 function last #"pump_type.ads" 8 0 0# 
   : int =
  1
 
 predicate in_range #"pump_type.ads" 8 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = full_tank_sensor, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type full_tank_sensor__ref #"pump_type.ads" 8 0 0# =
  { mutable full_tank_sensor__content "model_trace:" : full_tank_sensor }
 
 function full_tank_sensor__ref___projection #"pump_type.ads" 8 0 0# 
   (a : full_tank_sensor__ref) : full_tank_sensor =
  a.full_tank_sensor__content
 
 meta "model_projection" function full_tank_sensor__ref___projection
 
 meta "inline : no" function full_tank_sensor__ref___projection
 
 val full_tank_sensor__havoc #"pump_type.ads" 8 0 0# 
   (x : full_tank_sensor__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "nozzle" defined at pump.ads:83, created in Gnat2Why.Types.Translate_Type *)
module Pump__nozzle
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__price
 use        Pump_type__state
 use        Pump_type__nozzle_in_cradle
 use        Pump_type__full_tank_sensor

 type __split_fields #"pump_type.ads" 8 0 0# =
  { rec__s "model_trace:.3729" : Pump_type__state.state; rec__c "model_trace:.3740" : Pump_type__nozzle_in_cradle.nozzle_in_cradle; rec__f "model_trace:.3751" : Pump_type__full_tank_sensor.full_tank_sensor; rec__r "model_trace:.3762" : Pump_type__price.price; rec__p "model_trace:.3773" : Pump_type__price.price; rec__cash "model_trace:.3784" : Pump_type__price.price }
 
 function __split_fields_S__projection #"pump_type.ads" 5 0 0# "model_trace:.3729" 
   (a : __split_fields) : Pump_type__state.state =
  a.rec__s
 
 meta "model_projection" function __split_fields_S__projection
 
 meta "inline : no" function __split_fields_S__projection
 
 function __split_fields_C__projection #"pump.ads" 83 0 0# "model_trace:.3740" 
   (a : __split_fields) : Pump_type__nozzle_in_cradle.nozzle_in_cradle =
  a.rec__c
 
 meta "model_projection" function __split_fields_C__projection
 
 meta "inline : no" function __split_fields_C__projection
 
 function __split_fields_F__projection #"pump.ads" 83 0 0# "model_trace:.3751" 
   (a : __split_fields) : Pump_type__full_tank_sensor.full_tank_sensor =
  a.rec__f
 
 meta "model_projection" function __split_fields_F__projection
 
 meta "inline : no" function __split_fields_F__projection
 
 function __split_fields_R__projection #"pump.ads" 83 0 0# "model_trace:.3762" 
   (a : __split_fields) : Pump_type__price.price =
  a.rec__r
 
 meta "model_projection" function __split_fields_R__projection
 
 meta "inline : no" function __split_fields_R__projection
 
 function __split_fields_P__projection #"pump.ads" 83 0 0# "model_trace:.3773" 
   (a : __split_fields) : Pump_type__price.price =
  a.rec__p
 
 meta "model_projection" function __split_fields_P__projection
 
 meta "inline : no" function __split_fields_P__projection
 
 function __split_fields_Cash__projection #"pump.ads" 83 0 0# "model_trace:.3784" 
   (a : __split_fields) : Pump_type__price.price =
  a.rec__cash
 
 meta "model_projection" function __split_fields_Cash__projection
 
 meta "inline : no" function __split_fields_Cash__projection
 
 type __split_fields__ref #"pump.ads" 83 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref___projection #"pump.ads" 83 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc #"pump.ads" 83 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type nozzle #"pump.ads" 83 0 0# =
  { __split_fields "model_trace:" : __split_fields }
 
 function nozzle___projection #"pump.ads" 83 0 0# 
   (a : nozzle) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function nozzle___projection
 
 meta "inline : no" function nozzle___projection
 
 predicate s__pred #"pump.ads" 83 0 0# 
   (a : nozzle)  =
  true
 
 val rec__s_ #"pump.ads" 83 0 0# 
   (a : nozzle) : Pump_type__state.state
  requires { (s__pred a) }
  ensures { (result = a.__split_fields.rec__s) }
 
 predicate c__pred #"pump.ads" 83 0 0# 
   (a : nozzle)  =
  true
 
 val rec__c_ #"pump.ads" 83 0 0# 
   (a : nozzle) : Pump_type__nozzle_in_cradle.nozzle_in_cradle
  requires { (c__pred a) }
  ensures { (result = a.__split_fields.rec__c) }
 
 predicate f__pred #"pump.ads" 83 0 0# 
   (a : nozzle)  =
  true
 
 val rec__f_ #"pump.ads" 83 0 0# 
   (a : nozzle) : Pump_type__full_tank_sensor.full_tank_sensor
  requires { (f__pred a) }
  ensures { (result = a.__split_fields.rec__f) }
 
 predicate r__pred #"pump.ads" 83 0 0# 
   (a : nozzle)  =
  true
 
 val rec__r_ #"pump.ads" 83 0 0# 
   (a : nozzle) : Pump_type__price.price
  requires { (r__pred a) }
  ensures { (result = a.__split_fields.rec__r) }
 
 predicate p__pred #"pump.ads" 83 0 0# 
   (a : nozzle)  =
  true
 
 val rec__p_ #"pump.ads" 83 0 0# 
   (a : nozzle) : Pump_type__price.price
  requires { (p__pred a) }
  ensures { (result = a.__split_fields.rec__p) }
 
 predicate cash__pred #"pump.ads" 83 0 0# 
   (a : nozzle)  =
  true
 
 val rec__cash_ #"pump.ads" 83 0 0# 
   (a : nozzle) : Pump_type__price.price
  requires { (cash__pred a) }
  ensures { (result = a.__split_fields.rec__cash) }
 
 function bool_eq #"pump.ads" 83 0 0# 
   (a : nozzle) (b : nozzle) : bool =
  (if (( ( ( ( ( ((Pump_type__state.to_rep a.__split_fields.rec__s) = (Pump_type__state.to_rep b.__split_fields.rec__s)) /\ ((Pump_type__nozzle_in_cradle.to_rep a.__split_fields.rec__c) = (Pump_type__nozzle_in_cradle.to_rep b.__split_fields.rec__c)) ) /\ ((Pump_type__full_tank_sensor.to_rep a.__split_fields.rec__f) = (Pump_type__full_tank_sensor.to_rep b.__split_fields.rec__f)) ) /\ ((Pump_type__price.to_rep a.__split_fields.rec__r) = (Pump_type__price.to_rep b.__split_fields.rec__r)) ) /\ ((Pump_type__price.to_rep a.__split_fields.rec__p) = (Pump_type__price.to_rep b.__split_fields.rec__p)) ) /\ ((Pump_type__price.to_rep a.__split_fields.rec__cash) = (Pump_type__price.to_rep b.__split_fields.rec__cash)) )) then (
   True) else (
   False))
 
 function user_eq #"pump.ads" 83 0 0# 
   (a : nozzle) (b : nozzle) : bool
 
 function value__size #"pump.ads" 83 0 0# 
   : int
 
 function object__size #"pump.ads" 83 0 0# 
   (a : nozzle) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a : nozzle.
   ((object__size a) >= 0))
 
 function dummy #"pump.ads" 83 0 0# 
   : nozzle
 
 type nozzle__ref #"pump.ads" 83 0 0# =
  { mutable nozzle__content "model_trace:" : nozzle }
 
 function nozzle__ref___projection #"pump.ads" 83 0 0# 
   (a : nozzle__ref) : nozzle =
  a.nozzle__content
 
 meta "model_projection" function nozzle__ref___projection
 
 meta "inline : no" function nozzle__ref___projection
 
 val nozzle__havoc #"pump.ads" 83 0 0# 
   (x : nozzle__ref) : unit
  writes {x}

end

(* Module for defining the constant "n" defined at pump.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__inbasestate__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function n #"pump.ads" 7 0 0# 
   : Pump__nozzle.nozzle
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__inbasestate__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "inbasestate" defined at pump.ads:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__inbasestate
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function inbasestate #"pump.ads" 7 0 0# 
   (n : Pump__nozzle.nozzle) : bool

end

(* Module for defining the constant "n" defined at pump.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__inreadystate__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function n #"pump.ads" 10 0 0# 
   : Pump__nozzle.nozzle
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__inreadystate__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "inreadystate" defined at pump.ads:10, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__inreadystate
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function inreadystate #"pump.ads" 10 0 0# 
   (n : Pump__nozzle.nozzle) : bool

end

(* Module for defining the constant "n" defined at pump.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__inpumpingstate__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function n #"pump.ads" 13 0 0# 
   : Pump__nozzle.nozzle
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__inpumpingstate__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "inpumpingstate" defined at pump.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__inpumpingstate
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function inpumpingstate #"pump.ads" 13 0 0# 
   (n : Pump__nozzle.nozzle) : bool

end

(* Module for defining the constant "n" defined at pump.ads:16, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__inwaitingstate__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function n #"pump.ads" 16 0 0# 
   : Pump__nozzle.nozzle
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__inwaitingstate__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "inwaitingstate" defined at pump.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__inwaitingstate
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function inwaitingstate #"pump.ads" 16 0 0# 
   (n : Pump__nozzle.nozzle) : bool

end

(* Module for defining the constant "n" defined at pump.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__inrange__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function n #"pump.ads" 27 0 0# 
   : Pump__nozzle.nozzle
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__inrange__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "v" defined at pump.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__inrange__v
 use import "_gnatprove_standard".Main

 function v #"pump.ads" 27 0 0# "model" "model_trace:3294" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 5 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at pump.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__inrange__v__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "inrange" defined at pump.ads:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__inrange
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function inrange #"pump.ads" 27 0 0# 
   (n : Pump__nozzle.nozzle) (v : int) : bool

end

(* Module for defining the constant "n" defined at pump.ads:59, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__nounpaid__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function n #"pump.ads" 59 0 0# 
   : Pump__nozzle.nozzle
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:59, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__nounpaid__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "nounpaid" defined at pump.ads:59, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__nounpaid
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function nounpaid #"pump.ads" 59 0 0# 
   (n : Pump__nozzle.nozzle) : bool

end

(* Module for defining the constant "s" defined at pump.ads:52, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__registertanksensor__s
 use import "_gnatprove_standard".Main

 function s #"pump.ads" 52 0 0# "model" "model_trace:3476" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at pump.ads:52, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__registertanksensor__s__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at pump.ads:57, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__balancecheck__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function n #"pump.ads" 57 0 0# 
   : Pump__nozzle.nozzle
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:57, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__balancecheck__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "payment" defined at pump.ads:57, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__balancecheck__payment
 use import "_gnatprove_standard".Main

 function payment #"pump.ads" 57 0 0# "model" "model_trace:3515" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 5 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "payment" defined at pump.ads:57, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__balancecheck__payment__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "balancecheck" defined at pump.ads:57, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__balancecheck
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function balancecheck #"pump.ads" 57 0 0# 
   (n : Pump__nozzle.nozzle) (payment : int) : bool

end

(* Module for defining the constant "payment" defined at pump.ads:61, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__setbalance__payment
 use import "_gnatprove_standard".Main

 function payment #"pump.ads" 61 0 0# "model" "model_trace:3562" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 5 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "payment" defined at pump.ads:61, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__setbalance__payment__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at pump.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__getstate__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function n #"pump.ads" 69 0 0# 
   : Pump__nozzle.nozzle
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:69, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__getstate__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "getstate" defined at pump.ads:69, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__getstate
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function getstate #"pump.ads" 69 0 0# 
   (n : Pump__nozzle.nozzle) : int

end

(* Module for defining the constant "n" defined at pump.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__getcradle__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function n #"pump.ads" 71 0 0# 
   : Pump__nozzle.nozzle
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:71, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__getcradle__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "getcradle" defined at pump.ads:71, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__getcradle
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function getcradle #"pump.ads" 71 0 0# 
   (n : Pump__nozzle.nozzle) : int

end

(* Module for defining the constant "n" defined at pump.ads:73, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__gettanksensor__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function n #"pump.ads" 73 0 0# 
   : Pump__nozzle.nozzle
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:73, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__gettanksensor__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "gettanksensor" defined at pump.ads:73, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__gettanksensor
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function gettanksensor #"pump.ads" 73 0 0# 
   (n : Pump__nozzle.nozzle) : int

end

(* Module for defining the constant "n" defined at pump.ads:75, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__getreservior__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function n #"pump.ads" 75 0 0# 
   : Pump__nozzle.nozzle
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:75, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__getreservior__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "getreservior" defined at pump.ads:75, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__getreservior
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function getreservior #"pump.ads" 75 0 0# 
   (n : Pump__nozzle.nozzle) : int

end

(* Module for defining the constant "n" defined at pump.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__getunpaid__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function n #"pump.ads" 77 0 0# 
   : Pump__nozzle.nozzle
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__getunpaid__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "getunpaid" defined at pump.ads:77, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__getunpaid
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function getunpaid #"pump.ads" 77 0 0# 
   (n : Pump__nozzle.nozzle) : int

end

(* Module for defining the constant "n" defined at pump.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__getcash__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function n #"pump.ads" 79 0 0# 
   : Pump__nozzle.nozzle
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__getcash__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "getcash" defined at pump.ads:79, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__getcash
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function getcash #"pump.ads" 79 0 0# 
   (n : Pump__nozzle.nozzle) : int

end

(* Module for defining the constant "n" defined at pump.ads:93, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__balance__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function n #"pump.ads" 93 0 0# 
   : Pump__nozzle.nozzle
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:93, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__balance__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "balance" defined at pump.ads:93, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__balance
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 function balance #"pump.ads" 93 0 0# 
   (n : Pump__nozzle.nozzle) : bool

end

(* Module for axiomatizing the array theory associated to type "Tthree_pumpsB" defined at pump_unit.ads:7, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Pump__nozzle
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__nozzle

 function index_I1_one #"pump.ads" 83 0 0# 
   : int =
  1
 
 type component_type #"pump.ads" 83 0 0# =
  Pump__nozzle.nozzle
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type

end

(* Module for axiomatizing type "Tthree_pumpsB" defined at pump_unit.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__Tthree_pumpsB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__fuel_type
 use        Pump__nozzle
 use        Array__Int__Pump__nozzle

 type component_type #"pump.ads" 83 0 0# =
  Pump__nozzle.nozzle
 
 function index_1_id #"pump.ads" 83 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Pump__nozzle.map, 
 function array_bool_eq = Array__Int__Pump__nozzle.bool_eq, 
 type index_base_type = Pump_type__fuel_type.fuel_type, 
 type index_rep_type = int, 
 function to_rep = Pump_type__fuel_type.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Pump_type__fuel_type.in_range, 
 predicate index_dynamic_property = Pump_type__fuel_type.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tthree_pumpsB #"pump_unit.ads" 7 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tthree_pumpsB__ref #"pump_unit.ads" 7 0 0# =
  { mutable tthree_pumpsB__content "model_trace:" : tthree_pumpsB }
 
 function tthree_pumpsB__ref___projection #"pump_unit.ads" 7 0 0# 
   (a : tthree_pumpsB__ref) : tthree_pumpsB =
  a.tthree_pumpsB__content
 
 meta "model_projection" function tthree_pumpsB__ref___projection
 
 meta "inline : no" function tthree_pumpsB__ref___projection
 
 val tthree_pumpsB__havoc #"pump_unit.ads" 7 0 0# 
   (x : tthree_pumpsB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "three_pumps" defined at pump_unit.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__three_pumps
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__nozzle
 use        Array__Int__Pump__nozzle

 type component_type #"pump_unit.ads" 7 0 0# =
  Pump__nozzle.nozzle
 
 function first #"pump.ads" 83 0 0# 
   : int =
  0
 
 function last #"pump.ads" 83 0 0# 
   : int =
  2
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Pump__nozzle.map, 
 function array_bool_eq = Array__Int__Pump__nozzle.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "f" defined at pump_unit.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__setfuelvolume__f
 use import "_gnatprove_standard".Main

 function f #"pump_unit.ads" 13 0 0# "model" "model_trace:2672" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 5 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "f" defined at pump_unit.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__setfuelvolume__f__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "curr_fuel" defined at pump_unit.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__liftnozzle__curr_fuel
 use import "_gnatprove_standard".Main

 function curr_fuel #"pump_unit.ads" 21 0 0# "model" "model_trace:2709" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 4 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "curr_fuel" defined at pump_unit.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__liftnozzle__curr_fuel__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "curr_fuel" defined at pump_unit.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__replacenozzle__curr_fuel
 use import "_gnatprove_standard".Main

 function curr_fuel #"pump_unit.ads" 33 0 0# "model" "model_trace:2782" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 4 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "curr_fuel" defined at pump_unit.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__replacenozzle__curr_fuel__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "curr_fuel" defined at pump_unit.ads:42, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__requestpumping__curr_fuel
 use import "_gnatprove_standard".Main

 function curr_fuel #"pump_unit.ads" 42 0 0# "model" "model_trace:2829" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 4 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "curr_fuel" defined at pump_unit.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__requestpumping__curr_fuel__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "f" defined at pump_unit.ads:42, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__requestpumping__f
 use import "_gnatprove_standard".Main

 function f #"pump_unit.ads" 42 0 0# "model" "model_trace:2838" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 5 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "f" defined at pump_unit.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__requestpumping__f__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "curr_fuel" defined at pump_unit.ads:54, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__requeststoppumping__curr_fuel
 use import "_gnatprove_standard".Main

 function curr_fuel #"pump_unit.ads" 54 0 0# "model" "model_trace:2931" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 4 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "curr_fuel" defined at pump_unit.ads:54, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__requeststoppumping__curr_fuel__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "curr_fuel" defined at pump_unit.ads:63, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__tanksensorinput__curr_fuel
 use import "_gnatprove_standard".Main

 function curr_fuel #"pump_unit.ads" 63 0 0# "model" "model_trace:2978" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 4 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "curr_fuel" defined at pump_unit.ads:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__tanksensorinput__curr_fuel__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "signal" defined at pump_unit.ads:63, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__tanksensorinput__signal
 use import "_gnatprove_standard".Main

 function signal #"pump_unit.ads" 63 0 0# "model" "model_trace:2987" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "signal" defined at pump_unit.ads:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__tanksensorinput__signal__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "curr_fuel" defined at pump_unit.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__setpayment__curr_fuel
 use import "_gnatprove_standard".Main

 function curr_fuel #"pump_unit.ads" 71 0 0# "model" "model_trace:3035" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 4 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "curr_fuel" defined at pump_unit.ads:71, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__setpayment__curr_fuel__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "payment" defined at pump_unit.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__setpayment__payment
 use import "_gnatprove_standard".Main

 function payment #"pump_unit.ads" 71 0 0# "model" "model_trace:3044" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 5 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "payment" defined at pump_unit.ads:71, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__setpayment__payment__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "name" defined at system.ads:46, created in Gnat2Why.Types.Translate_Type *)
module System__name
 use import "_gnatprove_standard".Main
 use import "int".Int

 type name #"system.ads" 46 0 0# 
 
 function first #"system.ads" 46 0 0# 
   : int =
  0
 
 function last #"system.ads" 46 0 0# 
   : int =
  0
 
 predicate in_range #"system.ads" 46 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = name, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type name__ref #"system.ads" 46 0 0# =
  { mutable name__content "model_trace:" : name }
 
 function name__ref___projection #"system.ads" 46 0 0# 
   (a : name__ref) : name =
  a.name__content
 
 meta "model_projection" function name__ref___projection
 
 meta "inline : no" function name__ref___projection
 
 val name__havoc #"system.ads" 46 0 0# 
   (x : name__ref) : unit
  writes {x}

end

(* Module for defining the constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module System__system_name
 use import "_gnatprove_standard".Main

 function system_name #"system.ads" 47 0 0# "model" "model_trace:5120" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 46 0 0# 
   : int

end

(* Module for axiomatizing type "address" defined at system.ads:108, created in Gnat2Why.Types.Translate_Type *)
module System__address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type address #"system.ads" 108 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"system.ads" 108 0 0# 
   : BV32.t
 
 function first #"system.ads" 108 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"system.ads" 108 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"system.ads" 108 0 0# 
   : int =
  0
 
 function last_int #"system.ads" 108 0 0# 
   : int =
  4294967295
 
 predicate in_range #"system.ads" 108 0 0# 
   (x : BV32.t)  =
  true
 
 predicate in_range_int #"system.ads" 108 0 0# 
   (x : int)  =
  BV32.uint_in_range x
 
 clone export "ada__model".Static_Modular_32 with
 type t = address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type address__ref #"system.ads" 108 0 0# =
  { mutable address__content "model_trace:" : address }
 
 function address__ref___projection #"system.ads" 108 0 0# 
   (a : address__ref) : address =
  a.address__content
 
 meta "model_projection" function address__ref___projection
 
 meta "inline : no" function address__ref___projection
 
 val address__havoc #"system.ads" 108 0 0# 
   (x : address__ref) : unit
  writes {x}

end

(* Module for defining the constant "null_address" defined at system.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module System__null_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function null_address #"system.ads" 69 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module for defining the constant "left" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 77 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 77 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Olt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function olt #"system.ads" 77 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 78 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 78 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ole
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ole #"system.ads" 78 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 79 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 79 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ogt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ogt #"system.ads" 79 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 80 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 80 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oge
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function oge #"system.ads" 80 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 81 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 81 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oeq
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function oeq #"system.ads" 81 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for axiomatizing type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Translate_Type *)
module System__bit_order
 use import "_gnatprove_standard".Main
 use import "int".Int

 type bit_order #"system.ads" 91 0 0# 
 
 function first #"system.ads" 91 0 0# 
   : int =
  0
 
 function last #"system.ads" 91 0 0# 
   : int =
  1
 
 predicate in_range #"system.ads" 91 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = bit_order, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type bit_order__ref #"system.ads" 91 0 0# =
  { mutable bit_order__content "model_trace:" : bit_order }
 
 function bit_order__ref___projection #"system.ads" 91 0 0# 
   (a : bit_order__ref) : bit_order =
  a.bit_order__content
 
 meta "model_projection" function bit_order__ref___projection
 
 meta "inline : no" function bit_order__ref___projection
 
 val bit_order__havoc #"system.ads" 91 0 0# 
   (x : bit_order__ref) : unit
  writes {x}

end

(* Module for defining the constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_bit_order
 use import "_gnatprove_standard".Main

 function default_bit_order #"system.ads" 92 0 0# "model" "model_trace:5469" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 91 0 0# 
   : int

end

(* Module for defining the constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_priority
 use import "_gnatprove_standard".Main

 function max_priority #"system.ads" 97 0 0# "model" "model_trace:5485" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_interrupt_priority
 use import "_gnatprove_standard".Main

 function max_interrupt_priority #"system.ads" 98 0 0# "model" "model_trace:5495" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for axiomatizing type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type any_priority #"system.ads" 100 0 0# 
 
 function first #"system.ads" 100 0 0# 
   : int =
  0
 
 function last #"system.ads" 100 0 0# 
   : int =
  31
 
 predicate in_range #"system.ads" 100 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type any_priority__ref #"system.ads" 100 0 0# =
  { mutable any_priority__content "model_trace:" : any_priority }
 
 function any_priority__ref___projection #"system.ads" 100 0 0# 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref___projection
 
 meta "inline : no" function any_priority__ref___projection
 
 val any_priority__havoc #"system.ads" 100 0 0# 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type priority #"system.ads" 101 0 0# 
 
 function first #"system.ads" 101 0 0# 
   : int =
  0
 
 function last #"system.ads" 101 0 0# 
   : int =
  30
 
 predicate in_range #"system.ads" 101 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type priority__ref #"system.ads" 101 0 0# =
  { mutable priority__content "model_trace:" : priority }
 
 function priority__ref___projection #"system.ads" 101 0 0# 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref___projection
 
 meta "inline : no" function priority__ref___projection
 
 val priority__havoc #"system.ads" 101 0 0# 
   (x : priority__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type interrupt_priority #"system.ads" 102 0 0# 
 
 function first #"system.ads" 102 0 0# 
   : int =
  31
 
 function last #"system.ads" 102 0 0# 
   : int =
  31
 
 predicate in_range #"system.ads" 102 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type interrupt_priority__ref #"system.ads" 102 0 0# =
  { mutable interrupt_priority__content "model_trace:" : interrupt_priority }
 
 function interrupt_priority__ref___projection #"system.ads" 102 0 0# 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref___projection
 
 meta "inline : no" function interrupt_priority__ref___projection
 
 val interrupt_priority__havoc #"system.ads" 102 0 0# 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module for defining the constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use import "_gnatprove_standard".Main

 function default_priority #"system.ads" 104 0 0# "model" "model_trace:5547" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 101 0 0# 
   : int

end

(* Module for defining the constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_divide_checks
 use import "_gnatprove_standard".Main

 function backend_divide_checks #"system.ads" 121 0 0# "model" "model_trace:5577" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 121 0 0# 
   : int

end

(* Module for defining the constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_overflow_checks
 use import "_gnatprove_standard".Main

 function backend_overflow_checks #"system.ads" 122 0 0# "model" "model_trace:5587" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 122 0 0# 
   : int

end

(* Module for defining the constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module System__command_line_args
 use import "_gnatprove_standard".Main

 function command_line_args #"system.ads" 123 0 0# "model" "model_trace:5597" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 123 0 0# 
   : int

end

(* Module for defining the constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant *)
module System__configurable_run_time
 use import "_gnatprove_standard".Main

 function configurable_run_time #"system.ads" 124 0 0# "model" "model_trace:5607" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 124 0 0# 
   : int

end

(* Module for defining the constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant *)
module System__denorm
 use import "_gnatprove_standard".Main

 function denorm #"system.ads" 125 0 0# "model" "model_trace:5617" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 125 0 0# 
   : int

end

(* Module for defining the constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module System__duration_32_bits
 use import "_gnatprove_standard".Main

 function duration_32_bits #"system.ads" 126 0 0# "model" "model_trace:5627" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 126 0 0# 
   : int

end

(* Module for defining the constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module System__exit_status_supported
 use import "_gnatprove_standard".Main

 function exit_status_supported #"system.ads" 127 0 0# "model" "model_trace:5637" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 127 0 0# 
   : int

end

(* Module for defining the constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module System__fractional_fixed_ops
 use import "_gnatprove_standard".Main

 function fractional_fixed_ops #"system.ads" 128 0 0# "model" "model_trace:5647" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 128 0 0# 
   : int

end

(* Module for defining the constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_layout
 use import "_gnatprove_standard".Main

 function frontend_layout #"system.ads" 129 0 0# "model" "model_trace:5657" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 129 0 0# 
   : int

end

(* Module for defining the constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_overflows
 use import "_gnatprove_standard".Main

 function machine_overflows #"system.ads" 130 0 0# "model" "model_trace:5667" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 130 0 0# 
   : int

end

(* Module for defining the constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_rounds
 use import "_gnatprove_standard".Main

 function machine_rounds #"system.ads" 131 0 0# "model" "model_trace:5677" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 131 0 0# 
   : int

end

(* Module for defining the constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant *)
module System__preallocated_stacks
 use import "_gnatprove_standard".Main

 function preallocated_stacks #"system.ads" 132 0 0# "model" "model_trace:5687" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 132 0 0# 
   : int

end

(* Module for defining the constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant *)
module System__signed_zeros
 use import "_gnatprove_standard".Main

 function signed_zeros #"system.ads" 133 0 0# "model" "model_trace:5697" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 133 0 0# 
   : int

end

(* Module for defining the constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_default
 use import "_gnatprove_standard".Main

 function stack_check_default #"system.ads" 134 0 0# "model" "model_trace:5707" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 134 0 0# 
   : int

end

(* Module for defining the constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_probes
 use import "_gnatprove_standard".Main

 function stack_check_probes #"system.ads" 135 0 0# "model" "model_trace:5717" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 135 0 0# 
   : int

end

(* Module for defining the constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_limits
 use import "_gnatprove_standard".Main

 function stack_check_limits #"system.ads" 136 0 0# "model" "model_trace:5727" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 136 0 0# 
   : int

end

(* Module for defining the constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_aggregates
 use import "_gnatprove_standard".Main

 function support_aggregates #"system.ads" 137 0 0# "model" "model_trace:5737" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 137 0 0# 
   : int

end

(* Module for defining the constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_atomic_primitives
 use import "_gnatprove_standard".Main

 function support_atomic_primitives #"system.ads" 138 0 0# "model" "model_trace:5747" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 138 0 0# 
   : int

end

(* Module for defining the constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_assign
 use import "_gnatprove_standard".Main

 function support_composite_assign #"system.ads" 139 0 0# "model" "model_trace:5757" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 139 0 0# 
   : int

end

(* Module for defining the constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_compare
 use import "_gnatprove_standard".Main

 function support_composite_compare #"system.ads" 140 0 0# "model" "model_trace:5767" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 140 0 0# 
   : int

end

(* Module for defining the constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_long_shifts
 use import "_gnatprove_standard".Main

 function support_long_shifts #"system.ads" 141 0 0# "model" "model_trace:5777" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 141 0 0# 
   : int

end

(* Module for defining the constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__always_compatible_rep
 use import "_gnatprove_standard".Main

 function always_compatible_rep #"system.ads" 142 0 0# "model" "model_trace:5787" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 142 0 0# 
   : int

end

(* Module for defining the constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module System__suppress_standard_library
 use import "_gnatprove_standard".Main

 function suppress_standard_library #"system.ads" 143 0 0# "model" "model_trace:5797" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 143 0 0# 
   : int

end

(* Module for defining the constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module System__use_ada_main_program_name
 use import "_gnatprove_standard".Main

 function use_ada_main_program_name #"system.ads" 144 0 0# "model" "model_trace:5807" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 144 0 0# 
   : int

end

(* Module for defining the constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_exceptions
 use import "_gnatprove_standard".Main

 function frontend_exceptions #"system.ads" 145 0 0# "model" "model_trace:5817" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 145 0 0# 
   : int

end

(* Module for defining the constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module System__zcx_by_default
 use import "_gnatprove_standard".Main

 function zcx_by_default #"system.ads" 146 0 0# "model" "model_trace:5827" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 146 0 0# 
   : int

end

(* Module for axiomatizing the array theory associated to type "Tpriorities_mappingB" defined at system.ads:161, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 function index_I1_one #"system.ads" 146 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 146 0 0# =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__integer.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__Tpriorities_mappingB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        System__any_priority
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 1 0 0# =
  Standard__integer.integer
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = System__any_priority.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tpriorities_mappingB #"system.ads" 161 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tpriorities_mappingB__ref #"system.ads" 161 0 0# =
  { mutable tpriorities_mappingB__content "model_trace:" : tpriorities_mappingB }
 
 function tpriorities_mappingB__ref___projection #"system.ads" 161 0 0# 
   (a : tpriorities_mappingB__ref) : tpriorities_mappingB =
  a.tpriorities_mappingB__content
 
 meta "model_projection" function tpriorities_mappingB__ref___projection
 
 meta "inline : no" function tpriorities_mappingB__ref___projection
 
 val tpriorities_mappingB__havoc #"system.ads" 161 0 0# 
   (x : tpriorities_mappingB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__priorities_mapping
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 161 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T3s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3s #"system.ads" 166 0 0# 
 
 function first #"system.ads" 166 0 0# 
   : int =
  0
 
 function last #"system.ads" 166 0 0# 
   : int =
  31
 
 predicate in_range #"system.ads" 166 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type t3s__ref #"system.ads" 166 0 0# =
  { mutable t3s__content "model_trace:" : t3s }
 
 function t3s__ref___projection #"system.ads" 166 0 0# 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref___projection
 
 meta "inline : no" function t3s__ref___projection
 
 val t3s__havoc #"system.ads" 166 0 0# 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 166 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module System__underlying_priorities
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer

 function underlying_priorities #"system.ads" 165 0 0# "model_projected" "model_trace:5853" 
   : Array__Int__Standard__integer.map
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 161 0 0# 
   : int

end
(* Module for defining a ref holding the value of variable "n" defined at pump.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__enterreadystate__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 val n__split_fields #"pump.ads" 20 0 0#  : Pump__nozzle.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__enterreadystate__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "n" defined at pump.ads:29, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__startpumping__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 val n__split_fields #"pump.ads" 29 0 0#  : Pump__nozzle.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__startpumping__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "v" defined at pump.ads:29, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__startpumping__v
 use import "_gnatprove_standard".Main

 val v #"pump.ads" 29 0 0# "model" "model_trace:3322"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 5 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at pump.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__startpumping__v__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "n" defined at pump.ads:38, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__enterwaitingstate__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 val n__split_fields #"pump.ads" 38 0 0#  : Pump__nozzle.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__enterwaitingstate__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "n" defined at pump.ads:45, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__enterbasestate__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 val n__split_fields #"pump.ads" 45 0 0#  : Pump__nozzle.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__enterbasestate__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "n" defined at pump.ads:52, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__registertanksensor__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 val n__split_fields #"pump.ads" 52 0 0#  : Pump__nozzle.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:52, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__registertanksensor__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "n" defined at pump.ads:61, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__setbalance__n
 use import "_gnatprove_standard".Main
 use        Pump__nozzle

 val n__split_fields #"pump.ads" 61 0 0#  : Pump__nozzle.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 83 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at pump.ads:61, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__setbalance__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "curr_pump" defined at pump_unit.ads:9, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__curr_pump
 use import "_gnatprove_standard".Main
 use        Array__Int__Pump__nozzle

 val curr_pump #"pump_unit.ads" 9 0 0# "model_projected" "model_trace:2636"  : Array__Int__Pump__nozzle.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "curr_pump" defined at pump_unit.ads:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__curr_pump__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "fuel_needed" defined at pump_unit.ads:10, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__fuel_needed
 use import "_gnatprove_standard".Main

 val fuel_needed #"pump_unit.ads" 10 0 0# "model" "model_trace:2645"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 5 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fuel_needed" defined at pump_unit.ads:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__fuel_needed__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "fuel_pumped" defined at pump_unit.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__fuel_pumped
 use import "_gnatprove_standard".Main

 val fuel_pumped #"pump_unit.ads" 11 0 0# "model" "model_trace:2655"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 5 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fuel_pumped" defined at pump_unit.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__fuel_pumped__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "fuel_to_be_pumped" defined at pump_unit.adb:24, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__requestpumping__fuel_to_be_pumped
 use import "_gnatprove_standard".Main

 val fuel_to_be_pumped #"pump_unit.adb" 24 0 0# "model" "model_trace:2423"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_type.ads" 5 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fuel_to_be_pumped" defined at pump_unit.adb:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__requestpumping__fuel_to_be_pumped__axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant #"pump_type.ads" 5 0 0# "inline" 
   (temp___expr_3 : int) (temp___is_init_0 : bool) (temp___do_constant_1 : bool) (temp___do_toplevel_2 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_3)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___4 : int) (temp___5 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_9 : int) (temp___is_init_6 : bool) (temp___do_constant_7 : bool) (temp___do_toplevel_8 : bool)  =
  (if (( temp___is_init_6 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_9)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___10 : int) (temp___11 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_15 : int) (temp___is_init_12 : bool) (temp___do_constant_13 : bool) (temp___do_toplevel_14 : bool)  =
  (if (( temp___is_init_12 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_15)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___16 : int) (temp___17 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_21 : int) (temp___is_init_18 : bool) (temp___do_constant_19 : bool) (temp___do_toplevel_20 : bool)  =
  (if (( temp___is_init_18 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_21)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___22 : int) (temp___23 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_27 : int) (temp___is_init_24 : bool) (temp___do_constant_25 : bool) (temp___do_toplevel_26 : bool)  =
  (if (( temp___is_init_24 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_27)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___28 : int) (temp___29 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_33 : int) (temp___is_init_30 : bool) (temp___do_constant_31 : bool) (temp___do_toplevel_32 : bool)  =
  (if (( temp___is_init_30 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_33)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___34 : int) (temp___35 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_39 : int) (temp___is_init_36 : bool) (temp___do_constant_37 : bool) (temp___do_toplevel_38 : bool)  =
  (if (( temp___is_init_36 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_39)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___40 : int) (temp___41 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__short_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_45 : Standard__short_float.short_float) (temp___is_init_42 : bool) (temp___do_constant_43 : bool) (temp___do_toplevel_44 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___46 : Standard__short_float.short_float) (temp___47 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_51 : Standard__float.float) (temp___is_init_48 : bool) (temp___do_constant_49 : bool) (temp___do_toplevel_50 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___52 : Standard__float.float) (temp___53 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__long_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_57 : Standard__long_float.long_float) (temp___is_init_54 : bool) (temp___do_constant_55 : bool) (temp___do_toplevel_56 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___58 : Standard__long_float.long_float) (temp___59 : bool)  =
  true

end

(* Module giving axioms for type "long_long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__long_long_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_63 : Standard__long_long_float.long_long_float) (temp___is_init_60 : bool) (temp___do_constant_61 : bool) (temp___do_toplevel_62 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___64 : Standard__long_long_float.long_long_float) (temp___65 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_69 : int) (temp___is_init_66 : bool) (temp___do_constant_67 : bool) (temp___do_toplevel_68 : bool)  =
  (if (( temp___is_init_66 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_69)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___70 : int) (temp___71 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_75 : int) (temp___is_init_72 : bool) (temp___do_constant_73 : bool) (temp___do_toplevel_74 : bool)  =
  (if (( temp___is_init_72 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_75)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___76 : int) (temp___77 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_81 : int) (temp___is_init_78 : bool) (temp___do_constant_79 : bool) (temp___do_toplevel_80 : bool)  =
  (if (( temp___is_init_78 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___82 : int) (temp___83 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_87 : Standard__string.string) (temp___is_init_84 : bool) (temp___do_constant_85 : bool) (temp___do_toplevel_86 : bool)  =
  (if (temp___do_constant_85) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_87) (Standard__string.last temp___expr_87))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_92 : Standard__wide_string.wide_string) (temp___is_init_89 : bool) (temp___do_constant_90 : bool) (temp___do_toplevel_91 : bool)  =
  (if (temp___do_constant_90) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_92) (Standard__wide_string.last temp___expr_92))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_97 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_94 : bool) (temp___do_constant_95 : bool) (temp___do_toplevel_96 : bool)  =
  (if (temp___do_constant_95) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_97) (Standard__wide_wide_string.last temp___expr_97))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration__axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_102 : Standard__duration.duration) (temp___is_init_99 : bool) (temp___do_constant_100 : bool) (temp___do_toplevel_101 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___103 : Standard__duration.duration) (temp___104 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_108 : int) (temp___is_init_105 : bool) (temp___do_constant_106 : bool) (temp___do_toplevel_107 : bool)  =
  (if (( temp___is_init_105 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_108)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___109 : int) (temp___110 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_114 : int) (temp___is_init_111 : bool) (temp___do_constant_112 : bool) (temp___do_toplevel_113 : bool)  =
  (if (( temp___is_init_111 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_114)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___115 : int) (temp___116 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_120 : int) (temp___is_init_117 : bool) (temp___do_constant_118 : bool) (temp___do_toplevel_119 : bool)  =
  (if (( temp___is_init_117 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_120)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___121 : int) (temp___122 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_126 : int) (temp___is_init_123 : bool) (temp___do_constant_124 : bool) (temp___do_toplevel_125 : bool)  =
  (if (( temp___is_init_123 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_126)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___127 : int) (temp___128 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_132 : int) (temp___is_init_129 : bool) (temp___do_constant_130 : bool) (temp___do_toplevel_131 : bool)  =
  (if (( temp___is_init_129 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_132)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___133 : int) (temp___134 : bool)  =
  true

end

(* Module giving axioms for type "universal_real", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_real__axiom
 use import "_gnatprove_standard".Main
 use        Standard__universal_real

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_138 : Standard__universal_real.universal_real) (temp___is_init_135 : bool) (temp___do_constant_136 : bool) (temp___do_toplevel_137 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___139 : Standard__universal_real.universal_real) (temp___140 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "enterreadystate" defined at pump.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__enterreadystate
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "startpumping" defined at pump.ads:29, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__startpumping
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "enterwaitingstate" defined at pump.ads:38, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__enterwaitingstate
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "enterbasestate" defined at pump.ads:45, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__enterbasestate
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "registertanksensor" defined at pump.ads:52, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__registertanksensor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "setbalance" defined at pump.ads:61, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__setbalance
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "setfuelvolume" defined at pump_unit.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__setfuelvolume
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "liftnozzle" defined at pump_unit.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__liftnozzle
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "replacenozzle" defined at pump_unit.ads:33, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__replacenozzle
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "requestpumping" defined at pump_unit.ads:42, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__requestpumping
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "requeststoppumping" defined at pump_unit.ads:54, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__requeststoppumping
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "tanksensorinput" defined at pump_unit.ads:63, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__tanksensorinput
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "setpayment" defined at pump_unit.ads:71, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__setpayment
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "min_int" defined at system.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module System__min_int
 use import "_gnatprove_standard".Main

 function min_int #"system.ads" 51 0 0# "model" "model_trace:5130" 
   : int

end

(* Module for defining the constant "max_int" defined at system.ads:52, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_int
 use import "_gnatprove_standard".Main

 function max_int #"system.ads" 52 0 0# "model" "model_trace:5141" 
   : int

end

(* Module for defining the constant "max_binary_modulus" defined at system.ads:54, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_binary_modulus
 use import "_gnatprove_standard".Main

 function max_binary_modulus #"system.ads" 54 0 0# "model" "model_trace:5152" 
   : int

end

(* Module for defining the constant "max_nonbinary_modulus" defined at system.ads:55, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_nonbinary_modulus
 use import "_gnatprove_standard".Main

 function max_nonbinary_modulus #"system.ads" 55 0 0# "model" "model_trace:5165" 
   : int

end

(* Module for defining the constant "max_base_digits" defined at system.ads:57, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_base_digits
 use import "_gnatprove_standard".Main

 function max_base_digits #"system.ads" 57 0 0# "model" "model_trace:5180" 
   : int

end

(* Module for defining the constant "max_digits" defined at system.ads:58, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_digits
 use import "_gnatprove_standard".Main

 function max_digits #"system.ads" 58 0 0# "model" "model_trace:5190" 
   : int

end

(* Module for defining the constant "max_mantissa" defined at system.ads:60, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_mantissa
 use import "_gnatprove_standard".Main

 function max_mantissa #"system.ads" 60 0 0# "model" "model_trace:5200" 
   : int

end

(* Module for defining the constant "fine_delta" defined at system.ads:61, created in Gnat2Why.Decls.Translate_Constant *)
module System__fine_delta
 use import "_gnatprove_standard".Main
 use        Standard__universal_real

 function fine_delta #"system.ads" 61 0 0# 
   : Standard__universal_real.universal_real

end

(* Module for defining the constant "tick" defined at system.ads:63, created in Gnat2Why.Decls.Translate_Constant *)
module System__tick
 use import "_gnatprove_standard".Main
 use        Standard__universal_real

 function tick #"system.ads" 63 0 0# 
   : Standard__universal_real.universal_real

end

(* Module for defining the constant "storage_unit" defined at system.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_unit
 use import "_gnatprove_standard".Main

 function storage_unit #"system.ads" 71 0 0# "model" "model_trace:5251" 
   : int

end

(* Module for defining the constant "word_size" defined at system.ads:72, created in Gnat2Why.Decls.Translate_Constant *)
module System__word_size
 use import "_gnatprove_standard".Main

 function word_size #"system.ads" 72 0 0# "model" "model_trace:5260" 
   : int

end

(* Module for defining the constant "memory_size" defined at system.ads:73, created in Gnat2Why.Decls.Translate_Constant *)
module System__memory_size
 use import "_gnatprove_standard".Main

 function memory_size #"system.ads" 73 0 0# "model" "model_trace:5269" 
   : int

end

(* Module for defining the value of the aggregate at system.ads:166, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__underlying_priorities__aggregate_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 function system__underlying_priorities__aggregate_def #"system.ads" 166 0 0# 
   (temp___142 : int) (temp___143 : int) (temp___144 : int) (temp___145 : int) (temp___146 : int) (temp___147 : int) (temp___148 : int) (temp___149 : int) (temp___150 : int) (temp___151 : int) (temp___152 : int) (temp___153 : int) (temp___154 : int) (temp___155 : int) (temp___156 : int) (temp___157 : int) : Array__Int__Standard__integer.map
 
 axiom def_axiom :
  (forall temp___142 temp___143 temp___144 temp___145 temp___146 temp___147 temp___148 temp___149 temp___150 temp___151 temp___152 temp___153 temp___154 temp___155 temp___156 temp___157 : int.
   (let temp___141 = (system__underlying_priorities__aggregate_def temp___142 temp___143 temp___144 temp___145 temp___146 temp___147 temp___148 temp___149 temp___150 temp___151 temp___152 temp___153 temp___154 temp___155 temp___156 temp___157) in (
    (forall temp___158 : int.
     (if (( (31 <= temp___158) /\ (temp___158 <= 31) )) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___157))) else if (( (21 <= temp___158) /\ (temp___158 <= 30) )) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___156)))  else if ((temp___158 = 20)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___155)))  else if ((temp___158 = 19)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___154)))  else if ((temp___158 = 18)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___153)))  else if ((temp___158 = 17)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___152)))  else if ((temp___158 = 16)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___151)))  else if ((temp___158 = 15)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___150)))  else if ((temp___158 = 14)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___149)))  else if ((temp___158 = 13)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___148)))  else if ((temp___158 = 12)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___147)))  else if ((temp___158 = 11)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___146)))  else if ((temp___158 = 10)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___145)))  else if ((temp___158 = 9)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___144)))  else if ((temp___158 = 8)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___143)))  else if (( (0 <= temp___158) /\ (temp___158 <= 7) )) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___142))) else (
      true)))))
  )

end

(* Module giving axioms for type "fuel_type" defined at pump_type.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_type__fuel_type__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__fuel_type

 predicate dynamic_invariant #"system.ads" 167 0 0# "inline" 
   (temp___expr_162 : int) (temp___is_init_159 : bool) (temp___do_constant_160 : bool) (temp___do_toplevel_161 : bool)  =
  (if (( temp___is_init_159 \/ (Pump_type__fuel_type.first <= Pump_type__fuel_type.last) )) then (
   (Pump_type__fuel_type.dynamic_property Pump_type__fuel_type.first Pump_type__fuel_type.last temp___expr_162)) else true)
 
 predicate default_initial_assumption #"pump_type.ads" 4 0 0# "inline" 
   (temp___163 : int) (temp___164 : bool)  =
  true

end

(* Module giving axioms for type "TpriceB" defined at pump_type.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_type__TpriceB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "price" defined at pump_type.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_type__price__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__price

 predicate dynamic_invariant #"pump_type.ads" 4 0 0# "inline" 
   (temp___expr_168 : int) (temp___is_init_165 : bool) (temp___do_constant_166 : bool) (temp___do_toplevel_167 : bool)  =
  (if (( temp___is_init_165 \/ (Pump_type__price.first <= Pump_type__price.last) )) then (
   (Pump_type__price.dynamic_property Pump_type__price.first Pump_type__price.last temp___expr_168)) else true)
 
 predicate default_initial_assumption #"pump_type.ads" 5 0 0# "inline" 
   (temp___169 : int) (temp___170 : bool)  =
  true

end

(* Module giving axioms for type "state" defined at pump_type.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_type__state__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__state

 predicate dynamic_invariant #"pump_type.ads" 5 0 0# "inline" 
   (temp___expr_174 : int) (temp___is_init_171 : bool) (temp___do_constant_172 : bool) (temp___do_toplevel_173 : bool)  =
  (if (( temp___is_init_171 \/ (Pump_type__state.first <= Pump_type__state.last) )) then (
   (Pump_type__state.dynamic_property Pump_type__state.first Pump_type__state.last temp___expr_174)) else true)
 
 predicate default_initial_assumption #"pump_type.ads" 6 0 0# "inline" 
   (temp___175 : int) (temp___176 : bool)  =
  true

end

(* Module giving axioms for type "nozzle_in_cradleB" defined at pump_type.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_type__nozzle_in_cradleB__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__nozzle_in_cradleB

 predicate dynamic_invariant #"pump_type.ads" 6 0 0# "inline" 
   (temp___expr_180 : int) (temp___is_init_177 : bool) (temp___do_constant_178 : bool) (temp___do_toplevel_179 : bool)  =
  (if (( temp___is_init_177 \/ (Pump_type__nozzle_in_cradleB.first <= Pump_type__nozzle_in_cradleB.last) )) then (
   (Pump_type__nozzle_in_cradleB.dynamic_property Pump_type__nozzle_in_cradleB.first Pump_type__nozzle_in_cradleB.last temp___expr_180)) else true)
 
 predicate default_initial_assumption #"pump_type.ads" 7 0 0# "inline" 
   (temp___181 : int) (temp___182 : bool)  =
  true

end

(* Module giving axioms for type "nozzle_in_cradle" defined at pump_type.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_type__nozzle_in_cradle__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__nozzle_in_cradle

 predicate dynamic_invariant #"pump_type.ads" 7 0 0# "inline" 
   (temp___expr_186 : int) (temp___is_init_183 : bool) (temp___do_constant_184 : bool) (temp___do_toplevel_185 : bool)  =
  (if (( temp___is_init_183 \/ (Pump_type__nozzle_in_cradle.first <= Pump_type__nozzle_in_cradle.last) )) then (
   (Pump_type__nozzle_in_cradle.dynamic_property Pump_type__nozzle_in_cradle.first Pump_type__nozzle_in_cradle.last temp___expr_186)) else true)
 
 predicate default_initial_assumption #"pump_type.ads" 7 0 0# "inline" 
   (temp___187 : int) (temp___188 : bool)  =
  true

end

(* Module giving axioms for type "full_tank_sensorB" defined at pump_type.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_type__full_tank_sensorB__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__full_tank_sensorB

 predicate dynamic_invariant #"pump_type.ads" 7 0 0# "inline" 
   (temp___expr_192 : int) (temp___is_init_189 : bool) (temp___do_constant_190 : bool) (temp___do_toplevel_191 : bool)  =
  (if (( temp___is_init_189 \/ (Pump_type__full_tank_sensorB.first <= Pump_type__full_tank_sensorB.last) )) then (
   (Pump_type__full_tank_sensorB.dynamic_property Pump_type__full_tank_sensorB.first Pump_type__full_tank_sensorB.last temp___expr_192)) else true)
 
 predicate default_initial_assumption #"pump_type.ads" 8 0 0# "inline" 
   (temp___193 : int) (temp___194 : bool)  =
  true

end

(* Module giving axioms for type "full_tank_sensor" defined at pump_type.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_type__full_tank_sensor__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__full_tank_sensor

 predicate dynamic_invariant #"pump_type.ads" 8 0 0# "inline" 
   (temp___expr_198 : int) (temp___is_init_195 : bool) (temp___do_constant_196 : bool) (temp___do_toplevel_197 : bool)  =
  (if (( temp___is_init_195 \/ (Pump_type__full_tank_sensor.first <= Pump_type__full_tank_sensor.last) )) then (
   (Pump_type__full_tank_sensor.dynamic_property Pump_type__full_tank_sensor.first Pump_type__full_tank_sensor.last temp___expr_198)) else true)
 
 predicate default_initial_assumption #"pump_type.ads" 8 0 0# "inline" 
   (temp___199 : int) (temp___200 : bool)  =
  true

end

(* Module giving axioms for type "nozzle" defined at pump.ads:83, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__nozzle__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__price
 use        Pump_type__state
 use        Pump_type__nozzle_in_cradle
 use        Pump_type__full_tank_sensor
 use        Pump__nozzle

 predicate dynamic_invariant #"pump_type.ads" 8 0 0# "inline" 
   (temp___expr_204 : Pump__nozzle.nozzle) (temp___is_init_201 : bool) (temp___do_constant_202 : bool) (temp___do_toplevel_203 : bool)  =
  true
 
 predicate default_initial_assumption #"pump.ads" 83 0 0# "inline" 
   (temp___205 : Pump__nozzle.nozzle) (temp___206 : bool)  =
  ( ( ( ( ( (if ((Pump__nozzle.s__pred temp___205)) then (
   ((Pump_type__state.to_rep (Pump__nozzle.rec__s (Pump__nozzle.__split_fields temp___205))) = 0)) else true) /\ (if ((Pump__nozzle.c__pred temp___205)) then (
   ((Pump_type__nozzle_in_cradle.to_rep (Pump__nozzle.rec__c (Pump__nozzle.__split_fields temp___205))) = 1)) else true) ) /\ (if ((Pump__nozzle.f__pred temp___205)) then (
   ((Pump_type__full_tank_sensor.to_rep (Pump__nozzle.rec__f (Pump__nozzle.__split_fields temp___205))) = 0)) else true) ) /\ (if ((Pump__nozzle.r__pred temp___205)) then (
   ((Pump_type__price.to_rep (Pump__nozzle.rec__r (Pump__nozzle.__split_fields temp___205))) = 1000)) else true) ) /\ (if ((Pump__nozzle.p__pred temp___205)) then (
   ((Pump_type__price.to_rep (Pump__nozzle.rec__p (Pump__nozzle.__split_fields temp___205))) = 0)) else true) ) /\ (if ((Pump__nozzle.cash__pred temp___205)) then (
   ((Pump_type__price.to_rep (Pump__nozzle.rec__cash (Pump__nozzle.__split_fields temp___205))) = 0)) else true) )

end

(* Module giving axioms for type "Tthree_pumpsB" defined at pump_unit.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__Tthree_pumpsB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "three_pumps" defined at pump_unit.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__three_pumps__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__fuel_type
 use        Pump_type__price
 use        Pump_type__state
 use        Pump_type__nozzle_in_cradle
 use        Pump_type__full_tank_sensor
 use        Pump__nozzle
 use        Array__Int__Pump__nozzle
 use        Array__Int__Pump__nozzle
 use        Array__Int__Pump__nozzle

 predicate dynamic_invariant #"pump.ads" 83 0 0# "inline" 
   (temp___expr_210 : Array__Int__Pump__nozzle.map) (temp___is_init_207 : bool) (temp___do_constant_208 : bool) (temp___do_toplevel_209 : bool)  =
  true
 
 predicate default_initial_assumption #"pump_unit.ads" 7 0 0# "inline" 
   (temp___212 : Array__Int__Pump__nozzle.map) (temp___213 : bool)  =
  (forall temp___214 : int.
   (if (( (Pump_type__fuel_type.first <= temp___214) /\ (temp___214 <= Pump_type__fuel_type.last) )) then (
    (let temp___215 = (Array__Int__Pump__nozzle.get temp___212 temp___214) in (
     ( ( ( ( ( (if ((Pump__nozzle.s__pred temp___215)) then (
      ((Pump_type__state.to_rep (Pump__nozzle.rec__s (Pump__nozzle.__split_fields temp___215))) = 0)) else true) /\ (if ((Pump__nozzle.c__pred temp___215)) then (
      ((Pump_type__nozzle_in_cradle.to_rep (Pump__nozzle.rec__c (Pump__nozzle.__split_fields temp___215))) = 1)) else true) ) /\ (if ((Pump__nozzle.f__pred temp___215)) then (
      ((Pump_type__full_tank_sensor.to_rep (Pump__nozzle.rec__f (Pump__nozzle.__split_fields temp___215))) = 0)) else true) ) /\ (if ((Pump__nozzle.r__pred temp___215)) then (
      ((Pump_type__price.to_rep (Pump__nozzle.rec__r (Pump__nozzle.__split_fields temp___215))) = 1000)) else true) ) /\ (if ((Pump__nozzle.p__pred temp___215)) then (
      ((Pump_type__price.to_rep (Pump__nozzle.rec__p (Pump__nozzle.__split_fields temp___215))) = 0)) else true) ) /\ (if ((Pump__nozzle.cash__pred temp___215)) then (
      ((Pump_type__price.to_rep (Pump__nozzle.rec__cash (Pump__nozzle.__split_fields temp___215))) = 0)) else true) )))
   ) else true))

end

(* Module giving axioms for type "name" defined at system.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__name

 predicate dynamic_invariant #"pump.ads" 83 0 0# "inline" 
   (temp___expr_219 : int) (temp___is_init_216 : bool) (temp___do_constant_217 : bool) (temp___do_toplevel_218 : bool)  =
  (if (( temp___is_init_216 \/ (System__name.first <= System__name.last) )) then (
   (System__name.dynamic_property System__name.first System__name.last temp___expr_219)) else true)
 
 predicate default_initial_assumption #"system.ads" 46 0 0# "inline" 
   (temp___220 : int) (temp___221 : bool)  =
  true

end

(* Module giving axioms for type "address" defined at system.ads:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__address__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__address

 predicate dynamic_invariant #"system.ads" 46 0 0# "inline" 
   (temp___expr_225 : BV32.t) (temp___is_init_222 : bool) (temp___do_constant_223 : bool) (temp___do_toplevel_224 : bool)  =
  (if (( temp___is_init_222 \/ (BV32.ule System__address.first System__address.last) )) then (
   (System__address.dynamic_property System__address.first System__address.last temp___expr_225)) else true)
 
 predicate default_initial_assumption #"system.ads" 108 0 0# "inline" 
   (temp___226 : BV32.t) (temp___227 : bool)  =
  true

end

(* Module giving axioms for type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__bit_order__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__bit_order

 predicate dynamic_invariant #"system.ads" 108 0 0# "inline" 
   (temp___expr_231 : int) (temp___is_init_228 : bool) (temp___do_constant_229 : bool) (temp___do_toplevel_230 : bool)  =
  (if (( temp___is_init_228 \/ (System__bit_order.first <= System__bit_order.last) )) then (
   (System__bit_order.dynamic_property System__bit_order.first System__bit_order.last temp___expr_231)) else true)
 
 predicate default_initial_assumption #"system.ads" 91 0 0# "inline" 
   (temp___232 : int) (temp___233 : bool)  =
  true

end

(* Module giving axioms for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__any_priority

 predicate dynamic_invariant #"system.ads" 91 0 0# "inline" 
   (temp___expr_237 : int) (temp___is_init_234 : bool) (temp___do_constant_235 : bool) (temp___do_toplevel_236 : bool)  =
  (if (( temp___is_init_234 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_237)) else true)
 
 predicate default_initial_assumption #"system.ads" 100 0 0# "inline" 
   (temp___238 : int) (temp___239 : bool)  =
  true

end

(* Module giving axioms for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__priority

 predicate dynamic_invariant #"system.ads" 100 0 0# "inline" 
   (temp___expr_243 : int) (temp___is_init_240 : bool) (temp___do_constant_241 : bool) (temp___do_toplevel_242 : bool)  =
  (if (( temp___is_init_240 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_243)) else true)
 
 predicate default_initial_assumption #"system.ads" 101 0 0# "inline" 
   (temp___244 : int) (temp___245 : bool)  =
  true

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__interrupt_priority

 predicate dynamic_invariant #"system.ads" 101 0 0# "inline" 
   (temp___expr_249 : int) (temp___is_init_246 : bool) (temp___do_constant_247 : bool) (temp___do_toplevel_248 : bool)  =
  (if (( temp___is_init_246 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_249)) else true)
 
 predicate default_initial_assumption #"system.ads" 102 0 0# "inline" 
   (temp___250 : int) (temp___251 : bool)  =
  true

end

(* Module giving axioms for type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__Tpriorities_mappingB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priorities_mapping__axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 predicate dynamic_invariant #"system.ads" 102 0 0# "inline" 
   (temp___expr_255 : Array__Int__Standard__integer.map) (temp___is_init_252 : bool) (temp___do_constant_253 : bool) (temp___do_toplevel_254 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 161 0 0# "inline" 
   (temp___257 : Array__Int__Standard__integer.map) (temp___258 : bool)  =
  true

end

(* Module giving axioms for type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T3s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T4s__axiom
 use import "_gnatprove_standard".Main


end
(* Module for defining the value of constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__system_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__system_name

 axiom system_name__def_axiom :
  ((System__system_name.system_name ) = 0)

end

(* Module for defining the value of constant "min_int" defined at system.ads:51, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__min_int__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__min_int

 axiom min_int__def_axiom :
  ((System__min_int.min_int ) = ( -9223372036854775808 ))

end

(* Module for defining the value of constant "max_int" defined at system.ads:52, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_int__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_int

 axiom max_int__def_axiom :
  ((System__max_int.max_int ) = 9223372036854775807)

end

(* Module for defining the value of constant "max_binary_modulus" defined at system.ads:54, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_binary_modulus__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_binary_modulus

 axiom max_binary_modulus__def_axiom :
  ((System__max_binary_modulus.max_binary_modulus ) = 18446744073709551616)

end

(* Module for defining the value of constant "max_nonbinary_modulus" defined at system.ads:55, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_nonbinary_modulus__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_nonbinary_modulus

 axiom max_nonbinary_modulus__def_axiom :
  ((System__max_nonbinary_modulus.max_nonbinary_modulus ) = 4294967295)

end

(* Module for defining the value of constant "max_base_digits" defined at system.ads:57, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_base_digits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_base_digits

 axiom max_base_digits__def_axiom :
  ((System__max_base_digits.max_base_digits ) = 18)

end

(* Module for defining the value of constant "max_digits" defined at system.ads:58, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_digits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_digits

 axiom max_digits__def_axiom :
  ((System__max_digits.max_digits ) = 18)

end

(* Module for defining the value of constant "max_mantissa" defined at system.ads:60, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_mantissa__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_mantissa

 axiom max_mantissa__def_axiom :
  ((System__max_mantissa.max_mantissa ) = 63)

end

(* Module for defining the value of constant "fine_delta" defined at system.ads:61, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__fine_delta__axiom
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        Standard__universal_real
 use        System__fine_delta

 axiom fine_delta__def_axiom :
  ((System__fine_delta.fine_delta ) = (Standard__universal_real.of_real (0.000000000000000000108420217248550443400745280086994171142578125)))

end

(* Module for defining the value of constant "tick" defined at system.ads:63, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__tick__axiom
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        Standard__universal_real
 use        System__tick

 axiom tick__def_axiom :
  ((System__tick.tick ) = (Standard__universal_real.of_real (1.0E-2)))

end

(* Module for defining the value of constant "storage_unit" defined at system.ads:71, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__storage_unit__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__storage_unit

 axiom storage_unit__def_axiom :
  ((System__storage_unit.storage_unit ) = 8)

end

(* Module for defining the value of constant "word_size" defined at system.ads:72, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__word_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__word_size

 axiom word_size__def_axiom :
  ((System__word_size.word_size ) = 32)

end

(* Module for defining the value of constant "memory_size" defined at system.ads:73, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__memory_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__memory_size

 axiom memory_size__def_axiom :
  ((System__memory_size.memory_size ) = 4294967296)

end

(* Module for defining the value of constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_bit_order__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_bit_order

 axiom default_bit_order__def_axiom :
  ((System__default_bit_order.default_bit_order ) = 1)

end

(* Module for defining the value of constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_priority

 axiom max_priority__def_axiom :
  ((System__max_priority.max_priority ) = 30)

end

(* Module for defining the value of constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_interrupt_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_interrupt_priority

 axiom max_interrupt_priority__def_axiom :
  ((System__max_interrupt_priority.max_interrupt_priority ) = 31)

end

(* Module for defining the value of constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = 15)

end

(* Module for defining the value of constant "null_address" defined at system.ads:109, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__null_address__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32
 use        System__null_address

 axiom null_address__def_axiom :
  ((System__null_address.null_address ) = (BV32.of_int 0))

end

(* Module for defining the value of constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_divide_checks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_divide_checks

 axiom backend_divide_checks__def_axiom :
  ((System__backend_divide_checks.backend_divide_checks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_overflow_checks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_overflow_checks

 axiom backend_overflow_checks__def_axiom :
  ((System__backend_overflow_checks.backend_overflow_checks ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__command_line_args__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__command_line_args

 axiom command_line_args__def_axiom :
  ((System__command_line_args.command_line_args ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__configurable_run_time__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__configurable_run_time

 axiom configurable_run_time__def_axiom :
  ((System__configurable_run_time.configurable_run_time ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__denorm__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__denorm

 axiom denorm__def_axiom :
  ((System__denorm.denorm ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__duration_32_bits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__duration_32_bits

 axiom duration_32_bits__def_axiom :
  ((System__duration_32_bits.duration_32_bits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__exit_status_supported__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__exit_status_supported

 axiom exit_status_supported__def_axiom :
  ((System__exit_status_supported.exit_status_supported ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__fractional_fixed_ops__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__fractional_fixed_ops

 axiom fractional_fixed_ops__def_axiom :
  ((System__fractional_fixed_ops.fractional_fixed_ops ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_layout__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_layout

 axiom frontend_layout__def_axiom :
  ((System__frontend_layout.frontend_layout ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_overflows__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_overflows

 axiom machine_overflows__def_axiom :
  ((System__machine_overflows.machine_overflows ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_rounds__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_rounds

 axiom machine_rounds__def_axiom :
  ((System__machine_rounds.machine_rounds ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__preallocated_stacks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__preallocated_stacks

 axiom preallocated_stacks__def_axiom :
  ((System__preallocated_stacks.preallocated_stacks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__signed_zeros__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__signed_zeros

 axiom signed_zeros__def_axiom :
  ((System__signed_zeros.signed_zeros ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_default__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_default

 axiom stack_check_default__def_axiom :
  ((System__stack_check_default.stack_check_default ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_probes__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_probes

 axiom stack_check_probes__def_axiom :
  ((System__stack_check_probes.stack_check_probes ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_limits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_limits

 axiom stack_check_limits__def_axiom :
  ((System__stack_check_limits.stack_check_limits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_aggregates__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_aggregates

 axiom support_aggregates__def_axiom :
  ((System__support_aggregates.support_aggregates ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_atomic_primitives__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_atomic_primitives

 axiom support_atomic_primitives__def_axiom :
  ((System__support_atomic_primitives.support_atomic_primitives ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_assign__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_assign

 axiom support_composite_assign__def_axiom :
  ((System__support_composite_assign.support_composite_assign ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_compare__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_compare

 axiom support_composite_compare__def_axiom :
  ((System__support_composite_compare.support_composite_compare ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_long_shifts__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_long_shifts

 axiom support_long_shifts__def_axiom :
  ((System__support_long_shifts.support_long_shifts ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__always_compatible_rep__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__always_compatible_rep

 axiom always_compatible_rep__def_axiom :
  ((System__always_compatible_rep.always_compatible_rep ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__suppress_standard_library__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__suppress_standard_library

 axiom suppress_standard_library__def_axiom :
  ((System__suppress_standard_library.suppress_standard_library ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__use_ada_main_program_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__use_ada_main_program_name

 axiom use_ada_main_program_name__def_axiom :
  ((System__use_ada_main_program_name.use_ada_main_program_name ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_exceptions__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_exceptions

 axiom frontend_exceptions__def_axiom :
  ((System__frontend_exceptions.frontend_exceptions ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__zcx_by_default__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__zcx_by_default

 axiom zcx_by_default__def_axiom :
  ((System__zcx_by_default.zcx_by_default ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__underlying_priorities__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__underlying_priorities
 use        Array__Int__Standard__integer
 use        System__underlying_priorities__aggregate_def
 use        Array__Int__Standard__integer

 axiom underlying_priorities__def_axiom :
  ((System__underlying_priorities.underlying_priorities ) = (System__underlying_priorities__aggregate_def.system__underlying_priorities__aggregate_def ( -15 ) ( -7 ) ( -6 ) ( -5 ) ( -4 ) ( -3 ) ( -2 ) ( -1 ) 0 1 2 3 4 5 6 15))

end

(* Module for declaring a program function (and possibly an axiom) for "inbasestate" defined at pump.ads:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__inbasestate__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle
 use        Pump__inbasestate

 val inbasestate #"pump.ads" 7 0 0# 
   (n : Pump__nozzle.nozzle) : bool
  requires { true }
  ensures { (result = (Pump__inbasestate.inbasestate n)) }

end

(* Module for declaring a program function (and possibly an axiom) for "inreadystate" defined at pump.ads:10, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__inreadystate__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle
 use        Pump__inreadystate

 val inreadystate #"pump.ads" 10 0 0# 
   (n : Pump__nozzle.nozzle) : bool
  requires { true }
  ensures { (result = (Pump__inreadystate.inreadystate n)) }

end

(* Module for declaring a program function (and possibly an axiom) for "inpumpingstate" defined at pump.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__inpumpingstate__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle
 use        Pump__inpumpingstate

 val inpumpingstate #"pump.ads" 13 0 0# 
   (n : Pump__nozzle.nozzle) : bool
  requires { true }
  ensures { (result = (Pump__inpumpingstate.inpumpingstate n)) }

end

(* Module for declaring a program function (and possibly an axiom) for "inwaitingstate" defined at pump.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__inwaitingstate__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle
 use        Pump__inwaitingstate

 val inwaitingstate #"pump.ads" 16 0 0# 
   (n : Pump__nozzle.nozzle) : bool
  requires { true }
  ensures { (result = (Pump__inwaitingstate.inwaitingstate n)) }

end

(* Module for declaring a program function (and possibly an axiom) for "enterreadystate" defined at pump.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__enterreadystate__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle
 use        Pump__nozzle__axiom
 use        Pump__inbasestate
 use        Pump__inreadystate
 use        Pump__inpumpingstate
 use        Pump__inwaitingstate

 val enterreadystate #"pump.ads" 20 0 0# 
   (n__split_fields : Pump__nozzle.__split_fields__ref) : unit
  requires { ( ( ((Pump__inbasestate.inbasestate { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content }) = True) \/ ((Pump__inpumpingstate.inpumpingstate { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content }) = True) ) \/ ((Pump__inwaitingstate.inwaitingstate { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content }) = True) ) }
  ensures { ( ((Pump__inreadystate.inreadystate { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content }) = True) /\ (Pump__nozzle__axiom.dynamic_invariant { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content } True True True) ) }
  writes {n__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "inrange" defined at pump.ads:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__inrange__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle
 use        Pump__inrange

 val inrange #"pump.ads" 27 0 0# 
   (n : Pump__nozzle.nozzle) (v : int) : bool
  requires { true }
  ensures { (result = (Pump__inrange.inrange n v)) }

end

(* Module for declaring a program function (and possibly an axiom) for "startpumping" defined at pump.ads:29, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__startpumping__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__price__axiom
 use        Pump__nozzle
 use        Pump__nozzle__axiom
 use        Pump__inreadystate
 use        Pump__inpumpingstate
 use        Pump__inrange

 val startpumping #"pump.ads" 29 0 0# 
   (n__split_fields : Pump__nozzle.__split_fields__ref) (v : int__ref) : unit
  requires { ( ( ((Pump__inreadystate.inreadystate { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content }) = True) \/ ((Pump__inpumpingstate.inpumpingstate { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content }) = True) ) /\ ((Pump__inrange.inrange { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content } v.int__content) = True) ) }
  ensures { ( ( ((Pump__inpumpingstate.inpumpingstate { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content }) = True) /\ (v.int__content <= (old v.int__content )) ) /\ ( (Pump__nozzle__axiom.dynamic_invariant { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content } True True True) /\ (Pump_type__price__axiom.dynamic_invariant v.int__content True True True) ) ) }
  writes {n__split_fields, v}

end

(* Module for declaring a program function (and possibly an axiom) for "enterwaitingstate" defined at pump.ads:38, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__enterwaitingstate__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle
 use        Pump__nozzle__axiom
 use        Pump__inreadystate
 use        Pump__inwaitingstate

 val enterwaitingstate #"pump.ads" 38 0 0# 
   (n__split_fields : Pump__nozzle.__split_fields__ref) : unit
  requires { ((Pump__inreadystate.inreadystate { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content }) = True) }
  ensures { ( ((Pump__inwaitingstate.inwaitingstate { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content }) = True) /\ (Pump__nozzle__axiom.dynamic_invariant { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content } True True True) ) }
  writes {n__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "nounpaid" defined at pump.ads:59, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__nounpaid__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle
 use        Pump__nounpaid

 val nounpaid #"pump.ads" 59 0 0# 
   (n : Pump__nozzle.nozzle) : bool
  requires { true }
  ensures { (result = (Pump__nounpaid.nounpaid n)) }

end

(* Module for declaring a program function (and possibly an axiom) for "enterbasestate" defined at pump.ads:45, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__enterbasestate__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle
 use        Pump__nozzle__axiom
 use        Pump__inbasestate
 use        Pump__inwaitingstate
 use        Pump__nounpaid

 val enterbasestate #"pump.ads" 45 0 0# 
   (n__split_fields : Pump__nozzle.__split_fields__ref) : unit
  requires { ( ((Pump__inwaitingstate.inwaitingstate { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content }) = True) /\ ((Pump__nounpaid.nounpaid { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content }) = True) ) }
  ensures { ( ((Pump__inbasestate.inbasestate { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content }) = True) /\ (Pump__nozzle__axiom.dynamic_invariant { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content } True True True) ) }
  writes {n__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "registertanksensor" defined at pump.ads:52, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__registertanksensor__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle
 use        Pump__nozzle__axiom

 val registertanksensor #"pump.ads" 52 0 0# 
   (n__split_fields : Pump__nozzle.__split_fields__ref) (s : bool) : unit
  requires { true }
  ensures { (Pump__nozzle__axiom.dynamic_invariant { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content } True True True) }
  writes {n__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "balancecheck" defined at pump.ads:57, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__balancecheck__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle
 use        Pump__balancecheck

 val balancecheck #"pump.ads" 57 0 0# 
   (n : Pump__nozzle.nozzle) (payment : int) : bool
  requires { true }
  ensures { (result = (Pump__balancecheck.balancecheck n payment)) }

end

(* Module for declaring a program function (and possibly an axiom) for "setbalance" defined at pump.ads:61, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__setbalance__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle
 use        Pump__nozzle__axiom
 use        Pump__inwaitingstate
 use        Pump__nounpaid
 use        Pump__balancecheck

 val setbalance #"pump.ads" 61 0 0# 
   (n__split_fields : Pump__nozzle.__split_fields__ref) (payment : int) : unit
  requires { ( ((Pump__balancecheck.balancecheck { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content } payment) = True) /\ ((Pump__inwaitingstate.inwaitingstate { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content }) = True) ) }
  ensures { ( ( ((Pump__inwaitingstate.inwaitingstate { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content }) = True) /\ ((Pump__nounpaid.nounpaid { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content }) = True) ) /\ (Pump__nozzle__axiom.dynamic_invariant { Pump__nozzle.__split_fields = n__split_fields.Pump__nozzle.__split_fields__content } True True True) ) }
  writes {n__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "getstate" defined at pump.ads:69, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__getstate__axiom
 use import "_gnatprove_standard".Main
 use        Pump_type__state__axiom
 use        Pump__nozzle
 use        Pump__nozzle__axiom
 use        Pump__getstate

 val getstate #"pump.ads" 69 0 0# 
   (n : Pump__nozzle.nozzle) : int
  requires { true }
  ensures { ( (result = (Pump__getstate.getstate n)) /\ (Pump_type__state__axiom.dynamic_invariant result True False True) ) }
 
 axiom getstate__post_axiom :
  (forall n : Pump__nozzle.nozzle [(Pump__getstate.getstate n)].
   ( (Pump__nozzle__axiom.dynamic_invariant n True True True) -> (let result = (Pump__getstate.getstate n) in (
    (Pump_type__state__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "getcradle" defined at pump.ads:71, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__getcradle__axiom
 use import "_gnatprove_standard".Main
 use        Pump_type__nozzle_in_cradle__axiom
 use        Pump__nozzle
 use        Pump__nozzle__axiom
 use        Pump__getcradle

 val getcradle #"pump.ads" 71 0 0# 
   (n : Pump__nozzle.nozzle) : int
  requires { true }
  ensures { ( (result = (Pump__getcradle.getcradle n)) /\ (Pump_type__nozzle_in_cradle__axiom.dynamic_invariant result True False True) ) }
 
 axiom getcradle__post_axiom :
  (forall n : Pump__nozzle.nozzle [(Pump__getcradle.getcradle n)].
   ( (Pump__nozzle__axiom.dynamic_invariant n True True True) -> (let result = (Pump__getcradle.getcradle n) in (
    (Pump_type__nozzle_in_cradle__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "gettanksensor" defined at pump.ads:73, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__gettanksensor__axiom
 use import "_gnatprove_standard".Main
 use        Pump_type__full_tank_sensor__axiom
 use        Pump__nozzle
 use        Pump__nozzle__axiom
 use        Pump__gettanksensor

 val gettanksensor #"pump.ads" 73 0 0# 
   (n : Pump__nozzle.nozzle) : int
  requires { true }
  ensures { ( (result = (Pump__gettanksensor.gettanksensor n)) /\ (Pump_type__full_tank_sensor__axiom.dynamic_invariant result True False True) ) }
 
 axiom gettanksensor__post_axiom :
  (forall n : Pump__nozzle.nozzle [(Pump__gettanksensor.gettanksensor n)].
   ( (Pump__nozzle__axiom.dynamic_invariant n True True True) -> (let result = (Pump__gettanksensor.gettanksensor n) in (
    (Pump_type__full_tank_sensor__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "getreservior" defined at pump.ads:75, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__getreservior__axiom
 use import "_gnatprove_standard".Main
 use        Pump_type__price__axiom
 use        Pump__nozzle
 use        Pump__nozzle__axiom
 use        Pump__getreservior

 val getreservior #"pump.ads" 75 0 0# 
   (n : Pump__nozzle.nozzle) : int
  requires { true }
  ensures { ( (result = (Pump__getreservior.getreservior n)) /\ (Pump_type__price__axiom.dynamic_invariant result True False True) ) }
 
 axiom getreservior__post_axiom :
  (forall n : Pump__nozzle.nozzle [(Pump__getreservior.getreservior n)].
   ( (Pump__nozzle__axiom.dynamic_invariant n True True True) -> (let result = (Pump__getreservior.getreservior n) in (
    (Pump_type__price__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "getunpaid" defined at pump.ads:77, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__getunpaid__axiom
 use import "_gnatprove_standard".Main
 use        Pump_type__price__axiom
 use        Pump__nozzle
 use        Pump__nozzle__axiom
 use        Pump__getunpaid

 val getunpaid #"pump.ads" 77 0 0# 
   (n : Pump__nozzle.nozzle) : int
  requires { true }
  ensures { ( (result = (Pump__getunpaid.getunpaid n)) /\ (Pump_type__price__axiom.dynamic_invariant result True False True) ) }
 
 axiom getunpaid__post_axiom :
  (forall n : Pump__nozzle.nozzle [(Pump__getunpaid.getunpaid n)].
   ( (Pump__nozzle__axiom.dynamic_invariant n True True True) -> (let result = (Pump__getunpaid.getunpaid n) in (
    (Pump_type__price__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "getcash" defined at pump.ads:79, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__getcash__axiom
 use import "_gnatprove_standard".Main
 use        Pump_type__price__axiom
 use        Pump__nozzle
 use        Pump__nozzle__axiom
 use        Pump__getcash

 val getcash #"pump.ads" 79 0 0# 
   (n : Pump__nozzle.nozzle) : int
  requires { true }
  ensures { ( (result = (Pump__getcash.getcash n)) /\ (Pump_type__price__axiom.dynamic_invariant result True False True) ) }
 
 axiom getcash__post_axiom :
  (forall n : Pump__nozzle.nozzle [(Pump__getcash.getcash n)].
   ( (Pump__nozzle__axiom.dynamic_invariant n True True True) -> (let result = (Pump__getcash.getcash n) in (
    (Pump_type__price__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module giving a program function and a defining axiom for the expression function "balance" defined at pump.ads:93, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Pump__balance__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__price
 use        Pump__nozzle
 use        Pump__balance

 val balance #"pump.ads" 93 0 0# 
   (n : Pump__nozzle.nozzle) : bool
  requires { true }
  ensures { ( (result = (Pump__balance.balance n)) /\ ( (result = True) <-> ( ( ( ((Pump_type__price.to_rep (Pump__nozzle.rec__p (Pump__nozzle.__split_fields n))) <= 1000) /\ ((Pump_type__price.to_rep (Pump__nozzle.rec__cash (Pump__nozzle.__split_fields n))) <= 1000) ) /\ ((Pump_type__price.to_rep (Pump__nozzle.rec__r (Pump__nozzle.__split_fields n))) <= 1000) ) /\ ((((Pump_type__price.to_rep (Pump__nozzle.rec__r (Pump__nozzle.__split_fields n))) + (Pump_type__price.to_rep (Pump__nozzle.rec__p (Pump__nozzle.__split_fields n)))) + (Pump_type__price.to_rep (Pump__nozzle.rec__cash (Pump__nozzle.__split_fields n)))) = 1000) ) ) ) }
 
 axiom balance__def_axiom :
  (forall n : Pump__nozzle.nozzle [(Pump__balance.balance n)].
   ( ((Pump__balance.balance n) = True) <-> ( ( ( ((Pump_type__price.to_rep (Pump__nozzle.rec__p (Pump__nozzle.__split_fields n))) <= 1000) /\ ((Pump_type__price.to_rep (Pump__nozzle.rec__cash (Pump__nozzle.__split_fields n))) <= 1000) ) /\ ((Pump_type__price.to_rep (Pump__nozzle.rec__r (Pump__nozzle.__split_fields n))) <= 1000) ) /\ ((((Pump_type__price.to_rep (Pump__nozzle.rec__r (Pump__nozzle.__split_fields n))) + (Pump_type__price.to_rep (Pump__nozzle.rec__p (Pump__nozzle.__split_fields n)))) + (Pump_type__price.to_rep (Pump__nozzle.rec__cash (Pump__nozzle.__split_fields n)))) = 1000) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "setfuelvolume" defined at pump_unit.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__setfuelvolume__axiom
 use        Pump_unit__fuel_needed
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__price__axiom
 use        Pump_unit__fuel_needed

 val setfuelvolume #"pump_unit.ads" 13 0 0# 
   (f : int) : unit
  requires { (f <= 200) }
  ensures { (Pump_type__price__axiom.dynamic_invariant Pump_unit__fuel_needed.fuel_needed.int__content True True True) }
  writes {Pump_unit__fuel_needed.fuel_needed}

end

(* Module for declaring a program function (and possibly an axiom) for "liftnozzle" defined at pump_unit.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__liftnozzle__axiom
 use        Pump_unit__curr_pump
 use        Pump_unit__curr_pump
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__nozzle
 use        Pump__inbasestate
 use        Pump__inreadystate
 use        Pump__inwaitingstate
 use        Array__Int__Pump__nozzle
 use        Pump_unit__three_pumps__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__curr_pump

 val liftnozzle #"pump_unit.ads" 21 0 0# 
   (curr_fuel : int) : unit
  requires { ( ( ((Pump__inbasestate.inbasestate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel)) = True) \/ ((Pump__inwaitingstate.inwaitingstate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel)) = True) ) /\ (forall f : int.
   ( ( (0 <= f) /\ (f <= 2) ) -> ( (f <> curr_fuel) /\ ((Pump__inbasestate.inbasestate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content f)) = True) ) )) ) }
  ensures { ( ((Pump__inreadystate.inreadystate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel)) = True) /\ (Pump_unit__three_pumps__axiom.dynamic_invariant Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content True True True) ) }
  reads {Pump_unit__curr_pump.curr_pump}
  writes {Pump_unit__curr_pump.curr_pump}

end

(* Module for declaring a program function (and possibly an axiom) for "replacenozzle" defined at pump_unit.ads:33, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__replacenozzle__axiom
 use        Pump_unit__curr_pump
 use        Pump_unit__curr_pump
 use import "_gnatprove_standard".Main
 use        Pump__nozzle
 use        Pump__inreadystate
 use        Pump__inwaitingstate
 use        Array__Int__Pump__nozzle
 use        Pump_unit__three_pumps__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__curr_pump

 val replacenozzle #"pump_unit.ads" 33 0 0# 
   (curr_fuel : int) : unit
  requires { ((Pump__inreadystate.inreadystate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel)) = True) }
  ensures { ( ((Pump__inwaitingstate.inwaitingstate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel)) = True) /\ (Pump_unit__three_pumps__axiom.dynamic_invariant Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content True True True) ) }
  reads {Pump_unit__curr_pump.curr_pump}
  writes {Pump_unit__curr_pump.curr_pump}

end

(* Module for declaring a program function (and possibly an axiom) for "requestpumping" defined at pump_unit.ads:42, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__requestpumping__axiom
 use        Pump_unit__fuel_needed
 use        Pump_unit__fuel_pumped
 use        Pump_unit__curr_pump
 use        Pump_unit__fuel_pumped
 use        Pump_unit__curr_pump
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__price__axiom
 use        Pump__nozzle
 use        Pump__inreadystate
 use        Pump__inpumpingstate
 use        Array__Int__Pump__nozzle
 use        Pump_unit__three_pumps__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__curr_pump
 use        Pump_unit__fuel_needed
 use        Pump_unit__fuel_pumped

 val requestpumping #"pump_unit.ads" 42 0 0# 
   (curr_fuel : int) (f : int) : unit
  requires { ( ( ( ( ((Pump__inreadystate.inreadystate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel)) = True) \/ ((Pump__inpumpingstate.inpumpingstate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel)) = True) ) /\ (f <= 100) ) /\ (Pump_unit__fuel_pumped.fuel_pumped.int__content <= 200) ) /\ ( (Pump_unit__fuel_needed.fuel_needed.int__content = 0) \/ (Pump_unit__fuel_needed.fuel_needed.int__content > Pump_unit__fuel_pumped.fuel_pumped.int__content) ) ) }
  ensures { ( ( ((Pump__inpumpingstate.inpumpingstate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel)) = True) \/ ((Pump__inreadystate.inreadystate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel)) = True) ) /\ ( (Pump_type__price__axiom.dynamic_invariant Pump_unit__fuel_pumped.fuel_pumped.int__content True True True) /\ (Pump_unit__three_pumps__axiom.dynamic_invariant Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content True True True) ) ) }
  reads {Pump_unit__fuel_needed.fuel_needed, Pump_unit__fuel_pumped.fuel_pumped, Pump_unit__curr_pump.curr_pump}
  writes {Pump_unit__fuel_pumped.fuel_pumped, Pump_unit__curr_pump.curr_pump}

end

(* Module for declaring a program function (and possibly an axiom) for "requeststoppumping" defined at pump_unit.ads:54, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__requeststoppumping__axiom
 use        Pump_unit__curr_pump
 use        Pump_unit__curr_pump
 use import "_gnatprove_standard".Main
 use        Pump__nozzle
 use        Pump__inreadystate
 use        Pump__inpumpingstate
 use        Array__Int__Pump__nozzle
 use        Pump_unit__three_pumps__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__curr_pump

 val requeststoppumping #"pump_unit.ads" 54 0 0# 
   (curr_fuel : int) : unit
  requires { ((Pump__inpumpingstate.inpumpingstate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel)) = True) }
  ensures { ( ((Pump__inreadystate.inreadystate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel)) = True) /\ (Pump_unit__three_pumps__axiom.dynamic_invariant Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content True True True) ) }
  reads {Pump_unit__curr_pump.curr_pump}
  writes {Pump_unit__curr_pump.curr_pump}

end

(* Module for declaring a program function (and possibly an axiom) for "tanksensorinput" defined at pump_unit.ads:63, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__tanksensorinput__axiom
 use        Pump_unit__curr_pump
 use        Pump_unit__curr_pump
 use import "_gnatprove_standard".Main
 use        Pump__nozzle
 use        Pump__inreadystate
 use        Pump__inpumpingstate
 use        Array__Int__Pump__nozzle
 use        Pump_unit__three_pumps__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__curr_pump

 val tanksensorinput #"pump_unit.ads" 63 0 0# 
   (curr_fuel : int) (signal : bool) : unit
  requires { ( ((Pump__inpumpingstate.inpumpingstate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel)) = True) \/ ((Pump__inreadystate.inreadystate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel)) = True) ) }
  ensures { (Pump_unit__three_pumps__axiom.dynamic_invariant Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content True True True) }
  reads {Pump_unit__curr_pump.curr_pump}
  writes {Pump_unit__curr_pump.curr_pump}

end

(* Module for declaring a program function (and possibly an axiom) for "setpayment" defined at pump_unit.ads:71, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__setpayment__axiom
 use        Pump_unit__fuel_pumped
 use        Pump_unit__curr_pump
 use        Pump_unit__fuel_needed
 use        Pump_unit__fuel_pumped
 use        Pump_unit__curr_pump
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__price__axiom
 use        Pump__nozzle
 use        Pump__inbasestate
 use        Pump__inwaitingstate
 use        Pump__balancecheck
 use        Array__Int__Pump__nozzle
 use        Pump_unit__three_pumps__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__curr_pump
 use        Pump_unit__fuel_needed
 use        Pump_unit__fuel_pumped

 val setpayment #"pump_unit.ads" 71 0 0# 
   (curr_fuel : int) (payment : int) : unit
  requires { ( ((Pump__inwaitingstate.inwaitingstate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel)) = True) /\ ((Pump__balancecheck.balancecheck (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel) payment) = True) ) }
  ensures { ( ( ( ((Pump__inbasestate.inbasestate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content curr_fuel)) = True) /\ (Pump_unit__fuel_pumped.fuel_pumped.int__content = 0) ) /\ (Pump_unit__fuel_needed.fuel_needed.int__content = 0) ) /\ ( ( (Pump_type__price__axiom.dynamic_invariant Pump_unit__fuel_needed.fuel_needed.int__content True True True) /\ (Pump_type__price__axiom.dynamic_invariant Pump_unit__fuel_pumped.fuel_pumped.int__content True True True) ) /\ (Pump_unit__three_pumps__axiom.dynamic_invariant Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content True True True) ) ) }
  reads {Pump_unit__fuel_pumped.fuel_pumped, Pump_unit__curr_pump.curr_pump}
  writes {Pump_unit__fuel_needed.fuel_needed, Pump_unit__fuel_pumped.fuel_pumped, Pump_unit__curr_pump.curr_pump}

end

(* Module for declaring a program function (and possibly an axiom) for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Olt__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Olt

 val olt #"system.ads" 77 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Olt.olt left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ole__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Ole

 val ole #"system.ads" 78 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Ole.ole left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ogt__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Ogt

 val ogt #"system.ads" 79 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Ogt.ogt left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oge__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Oge

 val oge #"system.ads" 80 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Oge.oge left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oeq__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Oeq

 val oeq #"system.ads" 81 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Oeq.oeq left right)) }

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "pump_unit" defined at pump_unit.ads:5, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Pump_unit__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__fuel_type
 use        Pump_type__price__axiom
 use        Pump__nozzle
 use        Pump_unit__three_pumps__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__curr_pump
 use        Pump_unit__fuel_needed
 use        Pump_unit__fuel_pumped
 use        Pump_unit__three_pumps__axiom
 use        Pump_unit__curr_pump__axiom
 use        Pump_unit__fuel_needed__axiom
 use        Pump_unit__fuel_pumped__axiom
 use        Pump__nozzle__axiom
 use        Pump_type__fuel_type__axiom
 use        Pump_type__price__axiom
 use        Pump_type__state__axiom
 use        Pump_type__nozzle_in_cradle__axiom
 use        Pump_type__full_tank_sensor__axiom

 let def #"system.ads" 81 0 0# "GP_Subp:pump_unit.ads:5" "W:diverges:N" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( #"system.ads" 81 0 0# abstract ensures {true}(let _ = #"pump_unit.ads" 9 0 0# abstract ensures {true}(let _ = (if (((if ((Pump_type__fuel_type.first <= Pump_type__fuel_type.last)) then (
   ((Pump_type__fuel_type.last - Pump_type__fuel_type.first) + 1)) else (
   0)) > 0)) then (
   #"pump_unit.ads" 7 0 0# abstract ensures {true}(let _ = (let temp___261 = #"pump.ads" 83 0 0# (any Pump__nozzle.nozzle
   requires {true} 
   ensures {true} 
   ) in (
    ( (if ((Pump__nozzle.s__pred(temp___261))) then (
     #"pump.ads" 83 0 0# abstract ensures {true}(let _ = 0 in (
      ()))
      end ));
    (if ((Pump__nozzle.c__pred(temp___261))) then (
     #"pump.ads" 83 0 0# abstract ensures {true}(let _ = 1 in (
      ()))
      end ));
    (if ((Pump__nozzle.f__pred(temp___261))) then (
     #"pump.ads" 83 0 0# abstract ensures {true}(let _ = 0 in (
      ()))
      end ));
    (if ((Pump__nozzle.r__pred(temp___261))) then (
     #"pump.ads" 83 0 0# abstract ensures {true}(let _ = 1000 in (
      ()))
      end ));
    (if ((Pump__nozzle.p__pred(temp___261))) then (
     #"pump.ads" 83 0 0# abstract ensures {true}(let _ = 0 in (
      ()))
      end ));
    (if ((Pump__nozzle.cash__pred(temp___261))) then (
     #"pump.ads" 83 0 0# abstract ensures {true}(let _ = 0 in (
      ()))
      end )) )))
    in (
    ()))
    end )) in (
   ()))
   end  in (
   ()))
   end ;
  #"pump_unit.ads" 9 0 0# assume { (Pump_unit__three_pumps__axiom.default_initial_assumption Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content False) };
  #"pump_unit.ads" 7 0 0# assume { (Pump_unit__three_pumps__axiom.dynamic_invariant Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content False False True) };
  #"pump_unit.ads" 10 0 0# Pump_unit__fuel_needed.fuel_needed.int__content <- ( 0 );
  #"pump_type.ads" 5 0 0# assume { (Pump_type__price__axiom.dynamic_invariant Pump_unit__fuel_needed.fuel_needed.int__content True False True) };
  #"pump_unit.ads" 11 0 0# Pump_unit__fuel_pumped.fuel_pumped.int__content <- ( 0 );
  #"pump_type.ads" 5 0 0# assume { (Pump_type__price__axiom.dynamic_invariant Pump_unit__fuel_pumped.fuel_pumped.int__content True False True) };
  ( "GP_Sloc:pump_unit.adb:61:1" () ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "setfuelvolume" defined at pump_unit.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__setfuelvolume__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump_type__price__axiom
 use        Pump_unit__fuel_needed
 use        Pump_unit__setfuelvolume__f
 use        Pump_unit__fuel_needed__axiom
 use        Pump_unit__setfuelvolume__f__axiom
 use        Pump_type__price__axiom

 let def #"pump_type.ads" 5 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:13" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:13 *)
  ;
  #"pump_type.ads" 5 0 0# assume { (Pump_type__price__axiom.dynamic_invariant Pump_unit__fuel_needed.fuel_needed.int__content False False True) };
  #"pump_type.ads" 5 0 0# assume { (Pump_type__price__axiom.dynamic_invariant Pump_unit__setfuelvolume__f.f True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:13 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:13 *)
  ;
  #"pump_unit.ads" 13 0 0# abstract ensures {true}(let _ = (Pump_unit__setfuelvolume__f.f <= 200) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:13 *)
  ;
  #"pump_unit.ads" 13 0 0# assume { (Pump_unit__setfuelvolume__f.f <= 200) };
  () (* checking of pragma precondition pump_unit.ads:13 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:9:19" #"pump_unit.adb" 9 0 0# Pump_unit__fuel_needed.fuel_needed.int__content <- ( Pump_unit__setfuelvolume__f.f ) );
   #"pump_unit.adb" 7 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:13 *)
  ;
  #"pump_unit.adb" 7 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "liftnozzle" defined at pump_unit.ads:21, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__liftnozzle__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Pump_type__fuel_type__axiom
 use        Pump__nozzle
 use        Pump__inbasestate
 use        Pump__inbasestate__axiom
 use        Pump__inreadystate
 use        Pump__inreadystate__axiom
 use        Pump__inwaitingstate
 use        Pump__inwaitingstate__axiom
 use        Pump__enterreadystate__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__three_pumps__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__curr_pump
 use        Pump_unit__liftnozzle__curr_fuel
 use        Pump_unit__three_pumps__axiom
 use        Pump_unit__curr_pump__axiom
 use        Pump_unit__liftnozzle__curr_fuel__axiom
 use        Pump__inbasestate__axiom
 use        Pump__inreadystate__axiom
 use        Pump__inpumpingstate__axiom
 use        Pump__inwaitingstate__axiom
 use        Pump__enterreadystate__axiom
 use        Pump__nozzle__axiom
 use        Pump_type__fuel_type__axiom
 use        Pump_type__price__axiom
 use        Pump_type__state__axiom
 use        Pump_type__nozzle_in_cradle__axiom
 use        Pump_type__full_tank_sensor__axiom

 let def #"pump_unit.adb" 7 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:21" 
   (__void_param : unit)
  requires { true }
  ensures { ( #"pump_unit.ads" 30 0 0# "model_vc_post" "keep_on_simp" "GP_Sloc:pump_unit.ads:30:15" "GP_Reason:VC_POSTCONDITION" "GP_Id:1" "comment:     Post =>  inReadyState(curr_pump(curr_fuel))
              ^ pump_unit.ads:30:15:VC_POSTCONDITION" "GP_Shape:pragargs__call_inreadystate" ( "GP_Pretty_Ada:4668" "GP_Sloc:pump_unit.ads:30:15" ((Pump__inreadystate.inreadystate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__liftnozzle__curr_fuel.curr_fuel)) = True) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:21 *)
  ;
  #"pump_unit.ads" 7 0 0# assume { (Pump_unit__three_pumps__axiom.dynamic_invariant Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content False False True) };
  #"pump_type.ads" 4 0 0# assume { (Pump_type__fuel_type__axiom.dynamic_invariant Pump_unit__liftnozzle__curr_fuel.curr_fuel True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:21 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:21 *)
  ;
  #"pump_unit.ads" 21 0 0# abstract ensures {true}(let _ = (Boolean.andb((Boolean.orb((Pump__inbasestate__axiom.inbasestate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__liftnozzle__curr_fuel.curr_fuel))))) ((Pump__inwaitingstate__axiom.inwaitingstate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__liftnozzle__curr_fuel.curr_fuel))))))) (( (let f = #"pump_unit.ads" 21 0 0# (any int
  ) in (
   (if ((Boolean.andb((0 <= f)) ((f <= 2)))) then (
    #"pump_unit.ads" 21 0 0# abstract ensures {true}(let _ = ( (f <> Pump_unit__liftnozzle__curr_fuel.curr_fuel) && (Pump__inbasestate__axiom.inbasestate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (f)))) ) in (
     ()))
     end ))))
  ;
  #"pump_unit.ads" 28 0 0# (any bool
  requires {true} 
  ensures {( (result = True) <-> (forall f : int.
   ( ( (0 <= f) /\ (f <= 2) ) -> ( (f <> Pump_unit__liftnozzle__curr_fuel.curr_fuel) /\ ((Pump__inbasestate.inbasestate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content f)) = True) ) )) )} 
  ) ))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:21 *)
  ;
  #"pump_unit.ads" 7 0 0# assume { ( ( ((Pump__inbasestate.inbasestate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__liftnozzle__curr_fuel.curr_fuel)) = True) \/ ((Pump__inwaitingstate.inwaitingstate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__liftnozzle__curr_fuel.curr_fuel)) = True) ) /\ (forall f : int.
   ( ( (0 <= f) /\ (f <= 2) ) -> ( (f <> Pump_unit__liftnozzle__curr_fuel.curr_fuel) /\ ((Pump__inbasestate.inbasestate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content f)) = True) ) )) ) };
  () (* checking of pragma precondition pump_unit.ads:21 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:14:7" (let pump__enterreadystate__n__compl = (Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__liftnozzle__curr_fuel.curr_fuel)) in (
    #"pump_unit.ads" 21 0 0# let pump__enterreadystate__n__fields = { Pump__nozzle.__split_fields__content = (Pump__nozzle.__split_fields(pump__enterreadystate__n__compl)) } in 
     ( ( #"pump_unit.adb" 14 0 0# "model_vc" "keep_on_simp" "GP_Sloc:pump_unit.adb:14:7" "GP_Reason:VC_PRECONDITION" "GP_Id:0" "comment:      enterReadyState(curr_pump(curr_fuel));
      ^ pump_unit.adb:14:7:VC_PRECONDITION" "GP_Shape:call_enterreadystate" (Pump__enterreadystate__axiom.enterreadystate(pump__enterreadystate__n__fields)) );
     #"pump_unit.adb" 14 0 0# Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content <- ( (Array__Int__Pump__nozzle.set(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__liftnozzle__curr_fuel.curr_fuel) ({ Pump__nozzle.__split_fields = pump__enterreadystate__n__fields.Pump__nozzle.__split_fields__content })) ) )))
    );
   #"pump_unit.adb" 12 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:21 *)
  ;
  #"pump_unit.adb" 12 0 0# abstract ensures {true}(let _ = (Pump__inreadystate__axiom.inreadystate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__liftnozzle__curr_fuel.curr_fuel)))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "replacenozzle" defined at pump_unit.ads:33, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__replacenozzle__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump_type__fuel_type__axiom
 use        Pump__nozzle
 use        Pump__inreadystate
 use        Pump__inreadystate__axiom
 use        Pump__inwaitingstate
 use        Pump__inwaitingstate__axiom
 use        Pump__enterwaitingstate__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__three_pumps__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__curr_pump
 use        Pump_unit__replacenozzle__curr_fuel
 use        Pump_unit__three_pumps__axiom
 use        Pump_unit__curr_pump__axiom
 use        Pump_unit__replacenozzle__curr_fuel__axiom
 use        Pump__inreadystate__axiom
 use        Pump__inwaitingstate__axiom
 use        Pump__enterwaitingstate__axiom
 use        Pump__nozzle__axiom
 use        Pump_type__fuel_type__axiom
 use        Pump_type__price__axiom
 use        Pump_type__state__axiom
 use        Pump_type__nozzle_in_cradle__axiom
 use        Pump_type__full_tank_sensor__axiom

 let def #"pump_unit.ads" 21 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:33" 
   (__void_param : unit)
  requires { true }
  ensures { ( #"pump_unit.ads" 39 0 0# "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:pump_unit.ads:39:15" "GP_Id:3" "comment:       Post=> inWaitingState(curr_pump(curr_fuel))
              ^ pump_unit.ads:39:15:VC_POSTCONDITION" "GP_Shape:pragargs__call_inwaitingstate" ( "GP_Pretty_Ada:4726" "GP_Sloc:pump_unit.ads:39:15" ((Pump__inwaitingstate.inwaitingstate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__replacenozzle__curr_fuel.curr_fuel)) = True) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:33 *)
  ;
  #"pump_unit.ads" 7 0 0# assume { (Pump_unit__three_pumps__axiom.dynamic_invariant Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content False False True) };
  #"pump_type.ads" 4 0 0# assume { (Pump_type__fuel_type__axiom.dynamic_invariant Pump_unit__replacenozzle__curr_fuel.curr_fuel True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:33 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:33 *)
  ;
  #"pump_unit.ads" 33 0 0# abstract ensures {true}(let _ = (Pump__inreadystate__axiom.inreadystate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__replacenozzle__curr_fuel.curr_fuel)))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:33 *)
  ;
  #"pump_unit.ads" 33 0 0# assume { ((Pump__inreadystate.inreadystate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__replacenozzle__curr_fuel.curr_fuel)) = True) };
  () (* checking of pragma precondition pump_unit.ads:33 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:19:7" (let pump__enterwaitingstate__n__compl = (Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__replacenozzle__curr_fuel.curr_fuel)) in (
    #"pump_unit.ads" 33 0 0# let pump__enterwaitingstate__n__fields = { Pump__nozzle.__split_fields__content = (Pump__nozzle.__split_fields(pump__enterwaitingstate__n__compl)) } in 
     ( ( #"pump_unit.adb" 19 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:pump_unit.adb:19:7" "GP_Id:2" "comment:      enterWaitingState(curr_pump(curr_fuel));
      ^ pump_unit.adb:19:7:VC_PRECONDITION" "GP_Shape:call_enterwaitingstate" (Pump__enterwaitingstate__axiom.enterwaitingstate(pump__enterwaitingstate__n__fields)) );
     #"pump_unit.adb" 19 0 0# Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content <- ( (Array__Int__Pump__nozzle.set(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__replacenozzle__curr_fuel.curr_fuel) ({ Pump__nozzle.__split_fields = pump__enterwaitingstate__n__fields.Pump__nozzle.__split_fields__content })) ) )))
    );
   #"pump_unit.adb" 17 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:33 *)
  ;
  #"pump_unit.adb" 17 0 0# abstract ensures {true}(let _ = (Pump__inwaitingstate__axiom.inwaitingstate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__replacenozzle__curr_fuel.curr_fuel)))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "requestpumping" defined at pump_unit.ads:42, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__requestpumping__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Pump_type__fuel_type__axiom
 use        Pump_type__price
 use        Pump_type__price__axiom
 use        Pump__nozzle
 use        Pump__inreadystate
 use        Pump__inreadystate__axiom
 use        Pump__inpumpingstate
 use        Pump__inpumpingstate__axiom
 use        Pump__enterreadystate__axiom
 use        Pump__inrange
 use        Pump__inrange__axiom
 use        Pump__startpumping__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__three_pumps__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__curr_pump
 use        Pump_unit__fuel_needed
 use        Pump_unit__fuel_pumped
 use        Pump_unit__requestpumping__curr_fuel
 use        Pump_unit__requestpumping__f
 use        Pump_unit__requestpumping__fuel_to_be_pumped
 use        Pump_unit__requestpumping__fuel_to_be_pumped__axiom
 use        Pump_unit__three_pumps__axiom
 use        Pump_unit__curr_pump__axiom
 use        Pump_unit__fuel_needed__axiom
 use        Pump_unit__fuel_pumped__axiom
 use        Pump_unit__requestpumping__curr_fuel__axiom
 use        Pump_unit__requestpumping__f__axiom
 use        Pump__inbasestate__axiom
 use        Pump__inreadystate__axiom
 use        Pump__inpumpingstate__axiom
 use        Pump__inwaitingstate__axiom
 use        Pump__enterreadystate__axiom
 use        Pump__inrange__axiom
 use        Pump__startpumping__axiom
 use        Pump__nozzle__axiom
 use        Pump_type__fuel_type__axiom
 use        Pump_type__price__axiom
 use        Pump_type__state__axiom
 use        Pump_type__nozzle_in_cradle__axiom
 use        Pump_type__full_tank_sensor__axiom

 let def #"pump_unit.ads" 33 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:42" 
   (__void_param : unit)
  requires { true }
  ensures { ( #"pump_unit.ads" 51 0 0# "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:pump_unit.ads:51:14" "GP_Id:8" "comment:     Post => (inPumpingState(curr_pump(curr_fuel)) or inReadyState(curr_pump(curr_fuel)))
             ^ pump_unit.ads:51:14:VC_POSTCONDITION" "GP_Shape:pragargs__or" ( "GP_Pretty_Ada:4829" "GP_Sloc:pump_unit.ads:51:14" ( ((Pump__inpumpingstate.inpumpingstate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__requestpumping__curr_fuel.curr_fuel)) = True) \/ ((Pump__inreadystate.inreadystate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__requestpumping__curr_fuel.curr_fuel)) = True) ) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:42 *)
  ;
  #"pump_unit.ads" 7 0 0# assume { (Pump_unit__three_pumps__axiom.dynamic_invariant Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content False False True) };
  #"pump_type.ads" 5 0 0# assume { (Pump_type__price__axiom.dynamic_invariant Pump_unit__fuel_needed.fuel_needed.int__content False False True) };
  #"pump_type.ads" 5 0 0# assume { (Pump_type__price__axiom.dynamic_invariant Pump_unit__fuel_pumped.fuel_pumped.int__content False False True) };
  #"pump_type.ads" 4 0 0# assume { (Pump_type__fuel_type__axiom.dynamic_invariant Pump_unit__requestpumping__curr_fuel.curr_fuel True False True) };
  #"pump_type.ads" 5 0 0# assume { (Pump_type__price__axiom.dynamic_invariant Pump_unit__requestpumping__f.f True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:42 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:42 *)
  ;
  #"pump_unit.ads" 42 0 0# abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Boolean.andb((Boolean.orb((Pump__inreadystate__axiom.inreadystate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__requestpumping__curr_fuel.curr_fuel))))) ((Pump__inpumpingstate__axiom.inpumpingstate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__requestpumping__curr_fuel.curr_fuel))))))) ((Pump_unit__requestpumping__f.f <= 100)))) ((Pump_unit__fuel_pumped.fuel_pumped.int__content <= 200)))) ((Boolean.orb((Pump_unit__fuel_needed.fuel_needed.int__content = 0)) ((Pump_unit__fuel_needed.fuel_needed.int__content > Pump_unit__fuel_pumped.fuel_pumped.int__content))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:42 *)
  ;
  #"pump_type.ads" 5 0 0# assume { ( ( ( ( ((Pump__inreadystate.inreadystate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__requestpumping__curr_fuel.curr_fuel)) = True) \/ ((Pump__inpumpingstate.inpumpingstate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__requestpumping__curr_fuel.curr_fuel)) = True) ) /\ (Pump_unit__requestpumping__f.f <= 100) ) /\ (Pump_unit__fuel_pumped.fuel_pumped.int__content <= 200) ) /\ ( (Pump_unit__fuel_needed.fuel_needed.int__content = 0) \/ (Pump_unit__fuel_needed.fuel_needed.int__content > Pump_unit__fuel_pumped.fuel_pumped.int__content) ) ) };
  () (* checking of pragma precondition pump_unit.ads:42 *)
  ;
  try
   ( #"pump_unit.adb" 24 0 0# Pump_unit__requestpumping__fuel_to_be_pumped.fuel_to_be_pumped.int__content <- ( Pump_unit__requestpumping__f.f );
   #"pump_type.ads" 5 0 0# assume { (Pump_type__price__axiom.dynamic_invariant Pump_unit__requestpumping__fuel_to_be_pumped.fuel_to_be_pumped.int__content True False True) };
   ( "GP_Sloc:pump_unit.adb:27:7" (if ((Boolean.andb((Pump_unit__fuel_needed.fuel_needed.int__content <> 0)) ((Pump_unit__requestpumping__fuel_to_be_pumped.fuel_to_be_pumped.int__content > (Pump_unit__fuel_needed.fuel_needed.int__content - Pump_unit__fuel_pumped.fuel_pumped.int__content))))) then (
    ( "GP_Sloc:pump_unit.adb:28:27" #"pump_unit.adb" 28 0 0# Pump_unit__requestpumping__fuel_to_be_pumped.fuel_to_be_pumped.int__content <- ( ( #"pump_unit.adb" 28 0 0# "model_vc" "keep_on_simp" "GP_Sloc:pump_unit.adb:28:40" "GP_Reason:VC_RANGE_CHECK" "GP_Id:4" "comment:         fuel_to_be_pumped:=fuel_needed-fuel_pumped;
                                       ^ pump_unit.adb:28:40:VC_RANGE_CHECK" "GP_Shape:if__fuel_to_be_pumped_assign__sub" (Pump_type__price.range_check_((Pump_unit__fuel_needed.fuel_needed.int__content - Pump_unit__fuel_pumped.fuel_pumped.int__content))) ) ) )) else (
    ())) );
   ( "GP_Sloc:pump_unit.adb:31:7" ( #"pump_type.ads" 5 0 0# abstract ensures {true}(let _ = (Pump__inrange__axiom.inrange((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__requestpumping__curr_fuel.curr_fuel))) (Pump_unit__requestpumping__fuel_to_be_pumped.fuel_to_be_pumped.int__content)) in (
    ()))
    end ;
   #"pump_type.ads" 5 0 0# assume { ( "GP_Pretty_Ada:2458" "GP_Sloc:pump_unit.adb:31:22" ((Pump__inrange.inrange (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__requestpumping__curr_fuel.curr_fuel) Pump_unit__requestpumping__fuel_to_be_pumped.fuel_to_be_pumped.int__content) = True) ) } ) );
   ( "GP_Sloc:pump_unit.adb:32:7" (let pump__startpumping__n__compl = (Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__requestpumping__curr_fuel.curr_fuel)) in (
    #"pump_unit.ads" 42 0 0# let pump__startpumping__n__fields = { Pump__nozzle.__split_fields__content = (Pump__nozzle.__split_fields(pump__startpumping__n__compl)) } in 
     ( ( #"pump_unit.adb" 32 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:pump_unit.adb:32:7" "GP_Id:5" "comment:      startPumping(curr_pump(curr_fuel), fuel_to_be_pumped);
      ^ pump_unit.adb:32:7:VC_PRECONDITION" "GP_Shape:call_startpumping" (Pump__startpumping__axiom.startpumping(pump__startpumping__n__fields) (Pump_unit__requestpumping__fuel_to_be_pumped.fuel_to_be_pumped)) );
     #"pump_unit.adb" 32 0 0# Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content <- ( (Array__Int__Pump__nozzle.set(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__requestpumping__curr_fuel.curr_fuel) ({ Pump__nozzle.__split_fields = pump__startpumping__n__fields.Pump__nozzle.__split_fields__content })) ) )))
    );
   ( "GP_Sloc:pump_unit.adb:34:7" (if ((Pump_unit__requestpumping__fuel_to_be_pumped.fuel_to_be_pumped.int__content > 0)) then (
    ( "GP_Sloc:pump_unit.adb:35:21" #"pump_unit.adb" 35 0 0# Pump_unit__fuel_pumped.fuel_pumped.int__content <- ( ( #"pump_unit.adb" 35 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:pump_unit.adb:35:36" "GP_Id:7" "comment:        fuel_pumped := fuel_pumped + fuel_to_be_pumped;
                                   ^ pump_unit.adb:35:36:VC_RANGE_CHECK" "GP_Shape:if__fuel_pumped_assign__add" (Pump_type__price.range_check_((Pump_unit__fuel_pumped.fuel_pumped.int__content + Pump_unit__requestpumping__fuel_to_be_pumped.fuel_to_be_pumped.int__content))) ) ) )) else (
    ( "GP_Sloc:pump_unit.adb:38:10" (let pump__enterreadystate__n__compl = (Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__requestpumping__curr_fuel.curr_fuel)) in (
     #"pump_unit.ads" 42 0 0# let pump__enterreadystate__n__fields = { Pump__nozzle.__split_fields__content = (Pump__nozzle.__split_fields(pump__enterreadystate__n__compl)) } in 
      ( ( #"pump_unit.adb" 38 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:pump_unit.adb:38:10" "GP_Id:6" "comment:         enterReadyState(curr_pump(curr_fuel));
         ^ pump_unit.adb:38:10:VC_PRECONDITION" "GP_Shape:if__call_enterreadystate" (Pump__enterreadystate__axiom.enterreadystate(pump__enterreadystate__n__fields)) );
      #"pump_unit.adb" 38 0 0# Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content <- ( (Array__Int__Pump__nozzle.set(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__requestpumping__curr_fuel.curr_fuel) ({ Pump__nozzle.__split_fields = pump__enterreadystate__n__fields.Pump__nozzle.__split_fields__content })) ) )))
     ))) );
   #"pump_unit.adb" 22 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:42 *)
  ;
  #"pump_unit.adb" 22 0 0# abstract ensures {true}(let _ = (Boolean.orb((Pump__inpumpingstate__axiom.inpumpingstate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__requestpumping__curr_fuel.curr_fuel))))) ((Pump__inreadystate__axiom.inreadystate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__requestpumping__curr_fuel.curr_fuel)))))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "requeststoppumping" defined at pump_unit.ads:54, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__requeststoppumping__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump_type__fuel_type__axiom
 use        Pump__nozzle
 use        Pump__inreadystate
 use        Pump__inreadystate__axiom
 use        Pump__inpumpingstate
 use        Pump__inpumpingstate__axiom
 use        Pump__enterreadystate__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__three_pumps__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__curr_pump
 use        Pump_unit__requeststoppumping__curr_fuel
 use        Pump_unit__three_pumps__axiom
 use        Pump_unit__curr_pump__axiom
 use        Pump_unit__requeststoppumping__curr_fuel__axiom
 use        Pump__inbasestate__axiom
 use        Pump__inreadystate__axiom
 use        Pump__inpumpingstate__axiom
 use        Pump__inwaitingstate__axiom
 use        Pump__enterreadystate__axiom
 use        Pump__nozzle__axiom
 use        Pump_type__fuel_type__axiom
 use        Pump_type__price__axiom
 use        Pump_type__state__axiom
 use        Pump_type__nozzle_in_cradle__axiom
 use        Pump_type__full_tank_sensor__axiom

 let def #"pump_unit.ads" 42 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:54" 
   (__void_param : unit)
  requires { true }
  ensures { ( #"pump_unit.ads" 59 0 0# "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__call_inreadystate" "GP_Sloc:pump_unit.ads:59:15" "GP_Id:10" "comment:       Post=> inReadyState(curr_pump(curr_fuel))
              ^ pump_unit.ads:59:15:VC_POSTCONDITION" ( "GP_Pretty_Ada:4887" "GP_Sloc:pump_unit.ads:59:15" ((Pump__inreadystate.inreadystate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__requeststoppumping__curr_fuel.curr_fuel)) = True) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:54 *)
  ;
  #"pump_unit.ads" 7 0 0# assume { (Pump_unit__three_pumps__axiom.dynamic_invariant Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content False False True) };
  #"pump_type.ads" 4 0 0# assume { (Pump_type__fuel_type__axiom.dynamic_invariant Pump_unit__requeststoppumping__curr_fuel.curr_fuel True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:54 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:54 *)
  ;
  #"pump_unit.ads" 54 0 0# abstract ensures {true}(let _ = (Pump__inpumpingstate__axiom.inpumpingstate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__requeststoppumping__curr_fuel.curr_fuel)))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:54 *)
  ;
  #"pump_unit.ads" 54 0 0# assume { ((Pump__inpumpingstate.inpumpingstate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__requeststoppumping__curr_fuel.curr_fuel)) = True) };
  () (* checking of pragma precondition pump_unit.ads:54 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:45:7" (let pump__enterreadystate__n__compl = (Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__requeststoppumping__curr_fuel.curr_fuel)) in (
    #"pump_unit.ads" 54 0 0# let pump__enterreadystate__n__fields = { Pump__nozzle.__split_fields__content = (Pump__nozzle.__split_fields(pump__enterreadystate__n__compl)) } in 
     ( ( #"pump_unit.adb" 45 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Shape:call_enterreadystate" "GP_Sloc:pump_unit.adb:45:7" "GP_Id:9" "comment:      enterReadyState(curr_pump(curr_fuel));
      ^ pump_unit.adb:45:7:VC_PRECONDITION" (Pump__enterreadystate__axiom.enterreadystate(pump__enterreadystate__n__fields)) );
     #"pump_unit.adb" 45 0 0# Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content <- ( (Array__Int__Pump__nozzle.set(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__requeststoppumping__curr_fuel.curr_fuel) ({ Pump__nozzle.__split_fields = pump__enterreadystate__n__fields.Pump__nozzle.__split_fields__content })) ) )))
    );
   #"pump_unit.adb" 43 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:54 *)
  ;
  #"pump_unit.adb" 43 0 0# abstract ensures {true}(let _ = (Pump__inreadystate__axiom.inreadystate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__requeststoppumping__curr_fuel.curr_fuel)))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "tanksensorinput" defined at pump_unit.ads:63, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__tanksensorinput__subprogram_def
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Boolean
 use        Pump_type__fuel_type__axiom
 use        Pump__nozzle
 use        Pump__inreadystate
 use        Pump__inreadystate__axiom
 use        Pump__inpumpingstate
 use        Pump__inpumpingstate__axiom
 use        Pump__registertanksensor__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__three_pumps__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__curr_pump
 use        Pump_unit__tanksensorinput__curr_fuel
 use        Pump_unit__tanksensorinput__signal
 use        Pump_unit__three_pumps__axiom
 use        Pump_unit__curr_pump__axiom
 use        Pump_unit__tanksensorinput__curr_fuel__axiom
 use        Pump_unit__tanksensorinput__signal__axiom
 use        Pump__inreadystate__axiom
 use        Pump__inpumpingstate__axiom
 use        Pump__registertanksensor__axiom
 use        Pump__nozzle__axiom
 use        Pump_type__fuel_type__axiom
 use        Pump_type__price__axiom
 use        Pump_type__state__axiom
 use        Pump_type__nozzle_in_cradle__axiom
 use        Pump_type__full_tank_sensor__axiom

 let def #"pump_unit.ads" 54 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:63" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:63 *)
  ;
  #"pump_unit.ads" 7 0 0# assume { (Pump_unit__three_pumps__axiom.dynamic_invariant Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content False False True) };
  #"pump_type.ads" 4 0 0# assume { (Pump_type__fuel_type__axiom.dynamic_invariant Pump_unit__tanksensorinput__curr_fuel.curr_fuel True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:63 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:63 *)
  ;
  #"pump_unit.ads" 63 0 0# abstract ensures {true}(let _ = (Boolean.orb((Pump__inpumpingstate__axiom.inpumpingstate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__tanksensorinput__curr_fuel.curr_fuel))))) ((Pump__inreadystate__axiom.inreadystate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__tanksensorinput__curr_fuel.curr_fuel)))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:63 *)
  ;
  #"pump_unit.ads" 63 0 0# assume { ( ((Pump__inpumpingstate.inpumpingstate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__tanksensorinput__curr_fuel.curr_fuel)) = True) \/ ((Pump__inreadystate.inreadystate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__tanksensorinput__curr_fuel.curr_fuel)) = True) ) };
  () (* checking of pragma precondition pump_unit.ads:63 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:50:7" (let pump__registertanksensor__n__compl = (Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__tanksensorinput__curr_fuel.curr_fuel)) in (
    #"pump_unit.ads" 63 0 0# let pump__registertanksensor__n__fields = { Pump__nozzle.__split_fields__content = (Pump__nozzle.__split_fields(pump__registertanksensor__n__compl)) } in 
     ( (Pump__registertanksensor__axiom.registertanksensor(pump__registertanksensor__n__fields) (Pump_unit__tanksensorinput__signal.signal));
     #"pump_unit.adb" 50 0 0# Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content <- ( (Array__Int__Pump__nozzle.set(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__tanksensorinput__curr_fuel.curr_fuel) ({ Pump__nozzle.__split_fields = pump__registertanksensor__n__fields.Pump__nozzle.__split_fields__content })) ) )))
    );
   #"pump_unit.adb" 48 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:63 *)
  ;
  #"pump_unit.adb" 48 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "setpayment" defined at pump_unit.ads:71, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__setpayment__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Pump_type__fuel_type__axiom
 use        Pump_type__price__axiom
 use        Pump__nozzle
 use        Pump__inbasestate
 use        Pump__inbasestate__axiom
 use        Pump__inwaitingstate
 use        Pump__inwaitingstate__axiom
 use        Pump__enterbasestate__axiom
 use        Pump__balancecheck
 use        Pump__balancecheck__axiom
 use        Pump__setbalance__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__three_pumps__axiom
 use        Array__Int__Pump__nozzle
 use        Pump_unit__curr_pump
 use        Pump_unit__fuel_needed
 use        Pump_unit__fuel_pumped
 use        Pump_unit__setpayment__curr_fuel
 use        Pump_unit__setpayment__payment
 use        Pump_unit__three_pumps__axiom
 use        Pump_unit__curr_pump__axiom
 use        Pump_unit__fuel_needed__axiom
 use        Pump_unit__fuel_pumped__axiom
 use        Pump_unit__setpayment__curr_fuel__axiom
 use        Pump_unit__setpayment__payment__axiom
 use        Pump__inbasestate__axiom
 use        Pump__inwaitingstate__axiom
 use        Pump__enterbasestate__axiom
 use        Pump__balancecheck__axiom
 use        Pump__nounpaid__axiom
 use        Pump__setbalance__axiom
 use        Pump__nozzle__axiom
 use        Pump_type__fuel_type__axiom
 use        Pump_type__price__axiom
 use        Pump_type__state__axiom
 use        Pump_type__nozzle_in_cradle__axiom
 use        Pump_type__full_tank_sensor__axiom

 let def #"pump_unit.adb" 48 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:71" 
   (__void_param : unit)
  requires { true }
  ensures { ( #"pump_unit.ads" 80 0 0# "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:pump_unit.ads:80:16" "GP_Id:13" "comment:       Post => inBaseState(curr_pump(curr_fuel)) and
               ^ pump_unit.ads:80:16:VC_POSTCONDITION" "GP_Shape:pragargs__and" ( ( ( "GP_Pretty_Ada:3110" "GP_Sloc:pump_unit.ads:80:16" ((Pump__inbasestate.inbasestate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__setpayment__curr_fuel.curr_fuel)) = True) ) /\ ( "GP_Pretty_Ada:3114" "GP_Sloc:pump_unit.ads:81:18" (Pump_unit__fuel_pumped.fuel_pumped.int__content = 0) ) ) /\ ( "GP_Pretty_Ada:3118" "GP_Sloc:pump_unit.ads:81:37" (Pump_unit__fuel_needed.fuel_needed.int__content = 0) ) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:71 *)
  ;
  #"pump_unit.ads" 7 0 0# assume { (Pump_unit__three_pumps__axiom.dynamic_invariant Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content False False True) };
  #"pump_type.ads" 5 0 0# assume { (Pump_type__price__axiom.dynamic_invariant Pump_unit__fuel_needed.fuel_needed.int__content False False True) };
  #"pump_type.ads" 5 0 0# assume { (Pump_type__price__axiom.dynamic_invariant Pump_unit__fuel_pumped.fuel_pumped.int__content False False True) };
  #"pump_type.ads" 4 0 0# assume { (Pump_type__fuel_type__axiom.dynamic_invariant Pump_unit__setpayment__curr_fuel.curr_fuel True False True) };
  #"pump_type.ads" 5 0 0# assume { (Pump_type__price__axiom.dynamic_invariant Pump_unit__setpayment__payment.payment True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:71 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:71 *)
  ;
  #"pump_unit.ads" 71 0 0# abstract ensures {true}(let _ = (Boolean.andb((Pump__inwaitingstate__axiom.inwaitingstate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__setpayment__curr_fuel.curr_fuel))))) ((Pump__balancecheck__axiom.balancecheck((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__setpayment__curr_fuel.curr_fuel))) (Pump_unit__setpayment__payment.payment)))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:71 *)
  ;
  #"pump_unit.ads" 71 0 0# assume { ( ((Pump__inwaitingstate.inwaitingstate (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__setpayment__curr_fuel.curr_fuel)) = True) /\ ((Pump__balancecheck.balancecheck (Array__Int__Pump__nozzle.get Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content Pump_unit__setpayment__curr_fuel.curr_fuel) Pump_unit__setpayment__payment.payment) = True) ) };
  () (* checking of pragma precondition pump_unit.ads:71 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:55:7" (let pump__setbalance__n__compl = (Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__setpayment__curr_fuel.curr_fuel)) in (
    #"pump_unit.ads" 71 0 0# let pump__setbalance__n__fields = { Pump__nozzle.__split_fields__content = (Pump__nozzle.__split_fields(pump__setbalance__n__compl)) } in 
     ( ( #"pump_unit.adb" 55 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:pump_unit.adb:55:7" "GP_Id:11" "comment:      setBalance(curr_pump(curr_fuel), payment);
      ^ pump_unit.adb:55:7:VC_PRECONDITION" "GP_Shape:call_setbalance" (Pump__setbalance__axiom.setbalance(pump__setbalance__n__fields) (Pump_unit__setpayment__payment.payment)) );
     #"pump_unit.adb" 55 0 0# Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content <- ( (Array__Int__Pump__nozzle.set(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__setpayment__curr_fuel.curr_fuel) ({ Pump__nozzle.__split_fields = pump__setbalance__n__fields.Pump__nozzle.__split_fields__content })) ) )))
    );
   ( "GP_Sloc:pump_unit.adb:56:18" #"pump_unit.adb" 56 0 0# Pump_unit__fuel_pumped.fuel_pumped.int__content <- ( 0 ) );
   ( "GP_Sloc:pump_unit.adb:57:18" #"pump_unit.adb" 57 0 0# Pump_unit__fuel_needed.fuel_needed.int__content <- ( 0 ) );
   ( "GP_Sloc:pump_unit.adb:58:7" (let pump__enterbasestate__n__compl = (Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__setpayment__curr_fuel.curr_fuel)) in (
    #"pump_unit.ads" 71 0 0# let pump__enterbasestate__n__fields = { Pump__nozzle.__split_fields__content = (Pump__nozzle.__split_fields(pump__enterbasestate__n__compl)) } in 
     ( ( #"pump_unit.adb" 58 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:pump_unit.adb:58:7" "GP_Id:12" "comment:      enterBaseState(curr_pump(curr_fuel));
      ^ pump_unit.adb:58:7:VC_PRECONDITION" "GP_Shape:call_enterbasestate" (Pump__enterbasestate__axiom.enterbasestate(pump__enterbasestate__n__fields)) );
     #"pump_unit.adb" 58 0 0# Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content <- ( (Array__Int__Pump__nozzle.set(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__setpayment__curr_fuel.curr_fuel) ({ Pump__nozzle.__split_fields = pump__enterbasestate__n__fields.Pump__nozzle.__split_fields__content })) ) )))
    );
   #"pump_unit.adb" 53 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:71 *)
  ;
  #"pump_unit.adb" 53 0 0# abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Pump__inbasestate__axiom.inbasestate((Array__Int__Pump__nozzle.get(Pump_unit__curr_pump.curr_pump.Array__Int__Pump__nozzle.map__content) (Pump_unit__setpayment__curr_fuel.curr_fuel))))) ((Pump_unit__fuel_pumped.fuel_pumped.int__content = 0)))) ((Pump_unit__fuel_needed.fuel_needed.int__content = 0))) in (
   ()))
   end  )
end
